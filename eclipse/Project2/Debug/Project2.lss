
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027b0  00002844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  0000284c  2**0
                  ALLOC
  3 .stab         00001938  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008e9  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007851  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008600  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000089ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_1>
       8:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_2>
       c:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 eb       	ldi	r30, 0xB0	; 176
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b6 12 	call	0x256c	; 0x256c <main>
      8a:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <display>:

// Declare variables for time units and control flags
unsigned char secs1=0, secs2=0, minutes1=0, minutes2=0, hours1=0, hours2=0, flag_toggle=0, flag_pause=0;

void display (void)               // Function to display the time
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c4 55       	subi	r28, 0x54	; 84
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	PORTA=(1<<PA5);               // Set PA5 to display seconds1
     b60:	eb e3       	ldi	r30, 0x3B	; 59
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 e2       	ldi	r24, 0x20	; 32
     b66:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(secs1&0x0f); // Display the low nibble of seconds1
     b68:	a5 e3       	ldi	r26, 0x35	; 53
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e5 e3       	ldi	r30, 0x35	; 53
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	98 2f       	mov	r25, r24
     b74:	90 7f       	andi	r25, 0xF0	; 240
     b76:	80 91 68 00 	lds	r24, 0x0068
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	89 2b       	or	r24, r25
     b7e:	8c 93       	st	X, r24
     b80:	fe 01       	movw	r30, r28
     b82:	ef 5a       	subi	r30, 0xAF	; 175
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e4       	ldi	r27, 0x40	; 64
     b8e:	80 83       	st	Z, r24
     b90:	91 83       	std	Z+1, r25	; 0x01
     b92:	a2 83       	std	Z+2, r26	; 0x02
     b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b96:	8e 01       	movw	r16, r28
     b98:	03 5b       	subi	r16, 0xB3	; 179
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	fe 01       	movw	r30, r28
     b9e:	ef 5a       	subi	r30, 0xAF	; 175
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	60 81       	ld	r22, Z
     ba4:	71 81       	ldd	r23, Z+1	; 0x01
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	55 e4       	ldi	r21, 0x45	; 69
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	f8 01       	movw	r30, r16
     bbc:	80 83       	st	Z, r24
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	a2 83       	std	Z+2, r26	; 0x02
     bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bc4:	fe 01       	movw	r30, r28
     bc6:	e3 5b       	subi	r30, 0xB3	; 179
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bde:	88 23       	and	r24, r24
     be0:	44 f4       	brge	.+16     	; 0xbf2 <display+0xac>
		__ticks = 1;
     be2:	fe 01       	movw	r30, r28
     be4:	e5 5b       	subi	r30, 0xB5	; 181
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
     bf0:	64 c0       	rjmp	.+200    	; 0xcba <display+0x174>
	else if (__tmp > 65535)
     bf2:	fe 01       	movw	r30, r28
     bf4:	e3 5b       	subi	r30, 0xB3	; 179
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <display+0xcc>
     c10:	43 c0       	rjmp	.+134    	; 0xc98 <display+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	fe 01       	movw	r30, r28
     c14:	ef 5a       	subi	r30, 0xAF	; 175
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8e 01       	movw	r16, r28
     c32:	05 5b       	subi	r16, 0xB5	; 181
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	f8 01       	movw	r30, r16
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
     c48:	1f c0       	rjmp	.+62     	; 0xc88 <display+0x142>
     c4a:	fe 01       	movw	r30, r28
     c4c:	e7 5b       	subi	r30, 0xB7	; 183
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	80 e9       	ldi	r24, 0x90	; 144
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c58:	fe 01       	movw	r30, r28
     c5a:	e7 5b       	subi	r30, 0xB7	; 183
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <display+0x11c>
     c66:	fe 01       	movw	r30, r28
     c68:	e7 5b       	subi	r30, 0xB7	; 183
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c70:	de 01       	movw	r26, r28
     c72:	a5 5b       	subi	r26, 0xB5	; 181
     c74:	bf 4f       	sbci	r27, 0xFF	; 255
     c76:	fe 01       	movw	r30, r28
     c78:	e5 5b       	subi	r30, 0xB5	; 181
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	9c 93       	st	X, r25
     c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c88:	fe 01       	movw	r30, r28
     c8a:	e5 5b       	subi	r30, 0xB5	; 181
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	d1 f6       	brne	.-76     	; 0xc4a <display+0x104>
     c96:	27 c0       	rjmp	.+78     	; 0xce6 <display+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c98:	8e 01       	movw	r16, r28
     c9a:	05 5b       	subi	r16, 0xB5	; 181
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	fe 01       	movw	r30, r28
     ca0:	e3 5b       	subi	r30, 0xB3	; 179
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	f8 01       	movw	r30, r16
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
     cba:	de 01       	movw	r26, r28
     cbc:	a9 5b       	subi	r26, 0xB9	; 185
     cbe:	bf 4f       	sbci	r27, 0xFF	; 255
     cc0:	fe 01       	movw	r30, r28
     cc2:	e5 5b       	subi	r30, 0xB5	; 181
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	8d 93       	st	X+, r24
     ccc:	9c 93       	st	X, r25
     cce:	fe 01       	movw	r30, r28
     cd0:	e9 5b       	subi	r30, 0xB9	; 185
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <display+0x192>
     cdc:	fe 01       	movw	r30, r28
     cde:	e9 5b       	subi	r30, 0xB9	; 185
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
	_delay_ms(2);
	PORTA=(1<<PA4);               // Set PA4 to display seconds2
     ce6:	eb e3       	ldi	r30, 0x3B	; 59
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 e1       	ldi	r24, 0x10	; 16
     cec:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(secs2&0x0f); // Display the low nibble of seconds2
     cee:	a5 e3       	ldi	r26, 0x35	; 53
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e5 e3       	ldi	r30, 0x35	; 53
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	98 2f       	mov	r25, r24
     cfa:	90 7f       	andi	r25, 0xF0	; 240
     cfc:	80 91 69 00 	lds	r24, 0x0069
     d00:	8f 70       	andi	r24, 0x0F	; 15
     d02:	89 2b       	or	r24, r25
     d04:	8c 93       	st	X, r24
     d06:	fe 01       	movw	r30, r28
     d08:	ed 5b       	subi	r30, 0xBD	; 189
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a0 e0       	ldi	r26, 0x00	; 0
     d12:	b0 e4       	ldi	r27, 0x40	; 64
     d14:	80 83       	st	Z, r24
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	a2 83       	std	Z+2, r26	; 0x02
     d1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1c:	8e 01       	movw	r16, r28
     d1e:	01 5c       	subi	r16, 0xC1	; 193
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	fe 01       	movw	r30, r28
     d24:	ed 5b       	subi	r30, 0xBD	; 189
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a e7       	ldi	r20, 0x7A	; 122
     d36:	55 e4       	ldi	r21, 0x45	; 69
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	f8 01       	movw	r30, r16
     d42:	80 83       	st	Z, r24
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	a2 83       	std	Z+2, r26	; 0x02
     d48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d4a:	fe 01       	movw	r30, r28
     d4c:	ff 96       	adiw	r30, 0x3f	; 63
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d62:	88 23       	and	r24, r24
     d64:	2c f4       	brge	.+10     	; 0xd70 <display+0x22a>
		__ticks = 1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9e af       	std	Y+62, r25	; 0x3e
     d6c:	8d af       	std	Y+61, r24	; 0x3d
     d6e:	46 c0       	rjmp	.+140    	; 0xdfc <display+0x2b6>
	else if (__tmp > 65535)
     d70:	fe 01       	movw	r30, r28
     d72:	ff 96       	adiw	r30, 0x3f	; 63
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	3f ef       	ldi	r19, 0xFF	; 255
     d80:	4f e7       	ldi	r20, 0x7F	; 127
     d82:	57 e4       	ldi	r21, 0x47	; 71
     d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d88:	18 16       	cp	r1, r24
     d8a:	64 f5       	brge	.+88     	; 0xde4 <display+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8c:	fe 01       	movw	r30, r28
     d8e:	ed 5b       	subi	r30, 0xBD	; 189
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e af       	std	Y+62, r25	; 0x3e
     db8:	8d af       	std	Y+61, r24	; 0x3d
     dba:	0f c0       	rjmp	.+30     	; 0xdda <display+0x294>
     dbc:	80 e9       	ldi	r24, 0x90	; 144
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	9c af       	std	Y+60, r25	; 0x3c
     dc2:	8b af       	std	Y+59, r24	; 0x3b
     dc4:	8b ad       	ldd	r24, Y+59	; 0x3b
     dc6:	9c ad       	ldd	r25, Y+60	; 0x3c
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <display+0x282>
     dcc:	9c af       	std	Y+60, r25	; 0x3c
     dce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd2:	9e ad       	ldd	r25, Y+62	; 0x3e
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e af       	std	Y+62, r25	; 0x3e
     dd8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d ad       	ldd	r24, Y+61	; 0x3d
     ddc:	9e ad       	ldd	r25, Y+62	; 0x3e
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <display+0x276>
     de2:	16 c0       	rjmp	.+44     	; 0xe10 <display+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	fe 01       	movw	r30, r28
     de6:	ff 96       	adiw	r30, 0x3f	; 63
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	9e af       	std	Y+62, r25	; 0x3e
     dfa:	8d af       	std	Y+61, r24	; 0x3d
     dfc:	8d ad       	ldd	r24, Y+61	; 0x3d
     dfe:	9e ad       	ldd	r25, Y+62	; 0x3e
     e00:	9a af       	std	Y+58, r25	; 0x3a
     e02:	89 af       	std	Y+57, r24	; 0x39
     e04:	89 ad       	ldd	r24, Y+57	; 0x39
     e06:	9a ad       	ldd	r25, Y+58	; 0x3a
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <display+0x2c2>
     e0c:	9a af       	std	Y+58, r25	; 0x3a
     e0e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	PORTA=(1<<PA3);               // Set PA3 to display minutes1
     e10:	eb e3       	ldi	r30, 0x3B	; 59
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(minutes1&0x0f); // Display the low nibble of minutes1
     e18:	a5 e3       	ldi	r26, 0x35	; 53
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e5 e3       	ldi	r30, 0x35	; 53
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	98 2f       	mov	r25, r24
     e24:	90 7f       	andi	r25, 0xF0	; 240
     e26:	80 91 6a 00 	lds	r24, 0x006A
     e2a:	8f 70       	andi	r24, 0x0F	; 15
     e2c:	89 2b       	or	r24, r25
     e2e:	8c 93       	st	X, r24
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e4       	ldi	r27, 0x40	; 64
     e38:	8d ab       	std	Y+53, r24	; 0x35
     e3a:	9e ab       	std	Y+54, r25	; 0x36
     e3c:	af ab       	std	Y+55, r26	; 0x37
     e3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e40:	6d a9       	ldd	r22, Y+53	; 0x35
     e42:	7e a9       	ldd	r23, Y+54	; 0x36
     e44:	8f a9       	ldd	r24, Y+55	; 0x37
     e46:	98 ad       	ldd	r25, Y+56	; 0x38
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a e7       	ldi	r20, 0x7A	; 122
     e4e:	55 e4       	ldi	r21, 0x45	; 69
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	89 ab       	std	Y+49, r24	; 0x31
     e5a:	9a ab       	std	Y+50, r25	; 0x32
     e5c:	ab ab       	std	Y+51, r26	; 0x33
     e5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e60:	69 a9       	ldd	r22, Y+49	; 0x31
     e62:	7a a9       	ldd	r23, Y+50	; 0x32
     e64:	8b a9       	ldd	r24, Y+51	; 0x33
     e66:	9c a9       	ldd	r25, Y+52	; 0x34
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e74:	88 23       	and	r24, r24
     e76:	2c f4       	brge	.+10     	; 0xe82 <display+0x33c>
		__ticks = 1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	98 ab       	std	Y+48, r25	; 0x30
     e7e:	8f a7       	std	Y+47, r24	; 0x2f
     e80:	3f c0       	rjmp	.+126    	; 0xf00 <display+0x3ba>
	else if (__tmp > 65535)
     e82:	69 a9       	ldd	r22, Y+49	; 0x31
     e84:	7a a9       	ldd	r23, Y+50	; 0x32
     e86:	8b a9       	ldd	r24, Y+51	; 0x33
     e88:	9c a9       	ldd	r25, Y+52	; 0x34
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	4f e7       	ldi	r20, 0x7F	; 127
     e90:	57 e4       	ldi	r21, 0x47	; 71
     e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e96:	18 16       	cp	r1, r24
     e98:	4c f5       	brge	.+82     	; 0xeec <display+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9a:	6d a9       	ldd	r22, Y+53	; 0x35
     e9c:	7e a9       	ldd	r23, Y+54	; 0x36
     e9e:	8f a9       	ldd	r24, Y+55	; 0x37
     ea0:	98 ad       	ldd	r25, Y+56	; 0x38
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e2       	ldi	r20, 0x20	; 32
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	98 ab       	std	Y+48, r25	; 0x30
     ec0:	8f a7       	std	Y+47, r24	; 0x2f
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <display+0x39c>
     ec4:	80 e9       	ldi	r24, 0x90	; 144
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	9e a7       	std	Y+46, r25	; 0x2e
     eca:	8d a7       	std	Y+45, r24	; 0x2d
     ecc:	8d a5       	ldd	r24, Y+45	; 0x2d
     ece:	9e a5       	ldd	r25, Y+46	; 0x2e
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <display+0x38a>
     ed4:	9e a7       	std	Y+46, r25	; 0x2e
     ed6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eda:	98 a9       	ldd	r25, Y+48	; 0x30
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	98 ab       	std	Y+48, r25	; 0x30
     ee0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee4:	98 a9       	ldd	r25, Y+48	; 0x30
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	69 f7       	brne	.-38     	; 0xec4 <display+0x37e>
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <display+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eec:	69 a9       	ldd	r22, Y+49	; 0x31
     eee:	7a a9       	ldd	r23, Y+50	; 0x32
     ef0:	8b a9       	ldd	r24, Y+51	; 0x33
     ef2:	9c a9       	ldd	r25, Y+52	; 0x34
     ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	98 ab       	std	Y+48, r25	; 0x30
     efe:	8f a7       	std	Y+47, r24	; 0x2f
     f00:	8f a5       	ldd	r24, Y+47	; 0x2f
     f02:	98 a9       	ldd	r25, Y+48	; 0x30
     f04:	9c a7       	std	Y+44, r25	; 0x2c
     f06:	8b a7       	std	Y+43, r24	; 0x2b
     f08:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <display+0x3c6>
     f10:	9c a7       	std	Y+44, r25	; 0x2c
     f12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	PORTA=(1<<PA2);               // Set PA2 to display minutes2
     f14:	eb e3       	ldi	r30, 0x3B	; 59
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(minutes2&0x0f); // Display the low nibble of minutes2
     f1c:	a5 e3       	ldi	r26, 0x35	; 53
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e3       	ldi	r30, 0x35	; 53
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	98 2f       	mov	r25, r24
     f28:	90 7f       	andi	r25, 0xF0	; 240
     f2a:	80 91 6b 00 	lds	r24, 0x006B
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	89 2b       	or	r24, r25
     f32:	8c 93       	st	X, r24
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e4       	ldi	r27, 0x40	; 64
     f3c:	8f a3       	std	Y+39, r24	; 0x27
     f3e:	98 a7       	std	Y+40, r25	; 0x28
     f40:	a9 a7       	std	Y+41, r26	; 0x29
     f42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f44:	6f a1       	ldd	r22, Y+39	; 0x27
     f46:	78 a5       	ldd	r23, Y+40	; 0x28
     f48:	89 a5       	ldd	r24, Y+41	; 0x29
     f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4a e7       	ldi	r20, 0x7A	; 122
     f52:	55 e4       	ldi	r21, 0x45	; 69
     f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	8b a3       	std	Y+35, r24	; 0x23
     f5e:	9c a3       	std	Y+36, r25	; 0x24
     f60:	ad a3       	std	Y+37, r26	; 0x25
     f62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f64:	6b a1       	ldd	r22, Y+35	; 0x23
     f66:	7c a1       	ldd	r23, Y+36	; 0x24
     f68:	8d a1       	ldd	r24, Y+37	; 0x25
     f6a:	9e a1       	ldd	r25, Y+38	; 0x26
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f78:	88 23       	and	r24, r24
     f7a:	2c f4       	brge	.+10     	; 0xf86 <display+0x440>
		__ticks = 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9a a3       	std	Y+34, r25	; 0x22
     f82:	89 a3       	std	Y+33, r24	; 0x21
     f84:	3f c0       	rjmp	.+126    	; 0x1004 <display+0x4be>
	else if (__tmp > 65535)
     f86:	6b a1       	ldd	r22, Y+35	; 0x23
     f88:	7c a1       	ldd	r23, Y+36	; 0x24
     f8a:	8d a1       	ldd	r24, Y+37	; 0x25
     f8c:	9e a1       	ldd	r25, Y+38	; 0x26
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f9a:	18 16       	cp	r1, r24
     f9c:	4c f5       	brge	.+82     	; 0xff0 <display+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9e:	6f a1       	ldd	r22, Y+39	; 0x27
     fa0:	78 a5       	ldd	r23, Y+40	; 0x28
     fa2:	89 a5       	ldd	r24, Y+41	; 0x29
     fa4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e2       	ldi	r20, 0x20	; 32
     fac:	51 e4       	ldi	r21, 0x41	; 65
     fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9a a3       	std	Y+34, r25	; 0x22
     fc4:	89 a3       	std	Y+33, r24	; 0x21
     fc6:	0f c0       	rjmp	.+30     	; 0xfe6 <display+0x4a0>
     fc8:	80 e9       	ldi	r24, 0x90	; 144
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	98 a3       	std	Y+32, r25	; 0x20
     fce:	8f 8f       	std	Y+31, r24	; 0x1f
     fd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd2:	98 a1       	ldd	r25, Y+32	; 0x20
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <display+0x48e>
     fd8:	98 a3       	std	Y+32, r25	; 0x20
     fda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fdc:	89 a1       	ldd	r24, Y+33	; 0x21
     fde:	9a a1       	ldd	r25, Y+34	; 0x22
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	9a a3       	std	Y+34, r25	; 0x22
     fe4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe6:	89 a1       	ldd	r24, Y+33	; 0x21
     fe8:	9a a1       	ldd	r25, Y+34	; 0x22
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	69 f7       	brne	.-38     	; 0xfc8 <display+0x482>
     fee:	14 c0       	rjmp	.+40     	; 0x1018 <display+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff0:	6b a1       	ldd	r22, Y+35	; 0x23
     ff2:	7c a1       	ldd	r23, Y+36	; 0x24
     ff4:	8d a1       	ldd	r24, Y+37	; 0x25
     ff6:	9e a1       	ldd	r25, Y+38	; 0x26
     ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	9a a3       	std	Y+34, r25	; 0x22
    1002:	89 a3       	std	Y+33, r24	; 0x21
    1004:	89 a1       	ldd	r24, Y+33	; 0x21
    1006:	9a a1       	ldd	r25, Y+34	; 0x22
    1008:	9e 8f       	std	Y+30, r25	; 0x1e
    100a:	8d 8f       	std	Y+29, r24	; 0x1d
    100c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <display+0x4ca>
    1014:	9e 8f       	std	Y+30, r25	; 0x1e
    1016:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	PORTA=(1<<PA1);               // Set PA1 to display hours1
    1018:	eb e3       	ldi	r30, 0x3B	; 59
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(hours1&0x0f); // Display the low nibble of hours1
    1020:	a5 e3       	ldi	r26, 0x35	; 53
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e3       	ldi	r30, 0x35	; 53
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	98 2f       	mov	r25, r24
    102c:	90 7f       	andi	r25, 0xF0	; 240
    102e:	80 91 6c 00 	lds	r24, 0x006C
    1032:	8f 70       	andi	r24, 0x0F	; 15
    1034:	89 2b       	or	r24, r25
    1036:	8c 93       	st	X, r24
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e4       	ldi	r27, 0x40	; 64
    1040:	89 8f       	std	Y+25, r24	; 0x19
    1042:	9a 8f       	std	Y+26, r25	; 0x1a
    1044:	ab 8f       	std	Y+27, r26	; 0x1b
    1046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1048:	69 8d       	ldd	r22, Y+25	; 0x19
    104a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	4a e7       	ldi	r20, 0x7A	; 122
    1056:	55 e4       	ldi	r21, 0x45	; 69
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8d 8b       	std	Y+21, r24	; 0x15
    1062:	9e 8b       	std	Y+22, r25	; 0x16
    1064:	af 8b       	std	Y+23, r26	; 0x17
    1066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	2c f4       	brge	.+10     	; 0x108a <display+0x544>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 8b       	std	Y+20, r25	; 0x14
    1086:	8b 8b       	std	Y+19, r24	; 0x13
    1088:	3f c0       	rjmp	.+126    	; 0x1108 <display+0x5c2>
	else if (__tmp > 65535)
    108a:	6d 89       	ldd	r22, Y+21	; 0x15
    108c:	7e 89       	ldd	r23, Y+22	; 0x16
    108e:	8f 89       	ldd	r24, Y+23	; 0x17
    1090:	98 8d       	ldd	r25, Y+24	; 0x18
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	3f ef       	ldi	r19, 0xFF	; 255
    1096:	4f e7       	ldi	r20, 0x7F	; 127
    1098:	57 e4       	ldi	r21, 0x47	; 71
    109a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109e:	18 16       	cp	r1, r24
    10a0:	4c f5       	brge	.+82     	; 0x10f4 <display+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a2:	69 8d       	ldd	r22, Y+25	; 0x19
    10a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9c 8b       	std	Y+20, r25	; 0x14
    10c8:	8b 8b       	std	Y+19, r24	; 0x13
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <display+0x5a4>
    10cc:	80 e9       	ldi	r24, 0x90	; 144
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	9a 8b       	std	Y+18, r25	; 0x12
    10d2:	89 8b       	std	Y+17, r24	; 0x11
    10d4:	89 89       	ldd	r24, Y+17	; 0x11
    10d6:	9a 89       	ldd	r25, Y+18	; 0x12
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <display+0x592>
    10dc:	9a 8b       	std	Y+18, r25	; 0x12
    10de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	8b 89       	ldd	r24, Y+19	; 0x13
    10e2:	9c 89       	ldd	r25, Y+20	; 0x14
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9c 8b       	std	Y+20, r25	; 0x14
    10e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	8b 89       	ldd	r24, Y+19	; 0x13
    10ec:	9c 89       	ldd	r25, Y+20	; 0x14
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f7       	brne	.-38     	; 0x10cc <display+0x586>
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <display+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	6d 89       	ldd	r22, Y+21	; 0x15
    10f6:	7e 89       	ldd	r23, Y+22	; 0x16
    10f8:	8f 89       	ldd	r24, Y+23	; 0x17
    10fa:	98 8d       	ldd	r25, Y+24	; 0x18
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9c 8b       	std	Y+20, r25	; 0x14
    1106:	8b 8b       	std	Y+19, r24	; 0x13
    1108:	8b 89       	ldd	r24, Y+19	; 0x13
    110a:	9c 89       	ldd	r25, Y+20	; 0x14
    110c:	98 8b       	std	Y+16, r25	; 0x10
    110e:	8f 87       	std	Y+15, r24	; 0x0f
    1110:	8f 85       	ldd	r24, Y+15	; 0x0f
    1112:	98 89       	ldd	r25, Y+16	; 0x10
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <display+0x5ce>
    1118:	98 8b       	std	Y+16, r25	; 0x10
    111a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	PORTA=(1<<PA0);               // Set PA0 to display hours2
    111c:	eb e3       	ldi	r30, 0x3B	; 59
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 83       	st	Z, r24
	PORTC=(PORTC&0xf0)|(hours2&0x0f); // Display the low nibble of hours2
    1124:	a5 e3       	ldi	r26, 0x35	; 53
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	98 2f       	mov	r25, r24
    1130:	90 7f       	andi	r25, 0xF0	; 240
    1132:	80 91 6d 00 	lds	r24, 0x006D
    1136:	8f 70       	andi	r24, 0x0F	; 15
    1138:	89 2b       	or	r24, r25
    113a:	8c 93       	st	X, r24
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e4       	ldi	r27, 0x40	; 64
    1144:	8b 87       	std	Y+11, r24	; 0x0b
    1146:	9c 87       	std	Y+12, r25	; 0x0c
    1148:	ad 87       	std	Y+13, r26	; 0x0d
    114a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	55 e4       	ldi	r21, 0x45	; 69
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8f 83       	std	Y+7, r24	; 0x07
    1166:	98 87       	std	Y+8, r25	; 0x08
    1168:	a9 87       	std	Y+9, r26	; 0x09
    116a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <display+0x648>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	3f c0       	rjmp	.+126    	; 0x120c <display+0x6c6>
	else if (__tmp > 65535)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <display+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <display+0x6a8>
    11d0:	80 e9       	ldi	r24, 0x90	; 144
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <display+0x696>
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <display+0x68a>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <display+0x6da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <display+0x6d2>
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1220:	cc 5a       	subi	r28, 0xAC	; 172
    1222:	df 4f       	sbci	r29, 0xFF	; 255
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <time_increment>:

void time_increment(void)         // Function to increment time
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <time_increment+0x6>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	secs1++;                       // Increment seconds1
    1242:	80 91 68 00 	lds	r24, 0x0068
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	80 93 68 00 	sts	0x0068, r24
	if(secs1==10)                  // If seconds1 reaches 10, reset and increment seconds2
    124c:	80 91 68 00 	lds	r24, 0x0068
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	39 f4       	brne	.+14     	; 0x1262 <time_increment+0x2a>
	{
		secs2++;
    1254:	80 91 69 00 	lds	r24, 0x0069
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	80 93 69 00 	sts	0x0069, r24
		secs1=0;
    125e:	10 92 68 00 	sts	0x0068, r1
	}
	if(secs2==6)                   // If seconds2 reaches 6, reset and increment minutes1
    1262:	80 91 69 00 	lds	r24, 0x0069
    1266:	86 30       	cpi	r24, 0x06	; 6
    1268:	39 f4       	brne	.+14     	; 0x1278 <time_increment+0x40>
	{
		minutes1++;
    126a:	80 91 6a 00 	lds	r24, 0x006A
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	80 93 6a 00 	sts	0x006A, r24
		secs2=0;
    1274:	10 92 69 00 	sts	0x0069, r1
	}
	if(minutes1==10)               // If minutes1 reaches 10, reset and increment minutes2
    1278:	80 91 6a 00 	lds	r24, 0x006A
    127c:	8a 30       	cpi	r24, 0x0A	; 10
    127e:	39 f4       	brne	.+14     	; 0x128e <time_increment+0x56>
	{
		minutes2++;
    1280:	80 91 6b 00 	lds	r24, 0x006B
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 6b 00 	sts	0x006B, r24
		minutes1=0;
    128a:	10 92 6a 00 	sts	0x006A, r1
	}
	if(minutes2==6)                // If minutes2 reaches 6, reset and increment hours1
    128e:	80 91 6b 00 	lds	r24, 0x006B
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	39 f4       	brne	.+14     	; 0x12a4 <time_increment+0x6c>
	{
		hours1++;
    1296:	80 91 6c 00 	lds	r24, 0x006C
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 6c 00 	sts	0x006C, r24
		minutes2=0;
    12a0:	10 92 6b 00 	sts	0x006B, r1
	}
	if(hours1==10)                 // If hours1 reaches 10, reset and increment hours2
    12a4:	80 91 6c 00 	lds	r24, 0x006C
    12a8:	8a 30       	cpi	r24, 0x0A	; 10
    12aa:	39 f4       	brne	.+14     	; 0x12ba <time_increment+0x82>
	{
		hours1=0;
    12ac:	10 92 6c 00 	sts	0x006C, r1
		hours2++;
    12b0:	80 91 6d 00 	lds	r24, 0x006D
    12b4:	8f 5f       	subi	r24, 0xFF	; 255
    12b6:	80 93 6d 00 	sts	0x006D, r24
	}
	if((hours2==2)&(hours1==4))     // If hours2 reaches 2, and hours1 reaches 4 reset all counters and repeat timer again
    12ba:	80 91 6d 00 	lds	r24, 0x006D
    12be:	1a 82       	std	Y+2, r1	; 0x02
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <time_increment+0x90>
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	80 91 6c 00 	lds	r24, 0x006C
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <time_increment+0x9e>
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	99 83       	std	Y+1, r25	; 0x01
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
    12da:	89 23       	and	r24, r25
    12dc:	88 23       	and	r24, r24
    12de:	31 f0       	breq	.+12     	; 0x12ec <time_increment+0xb4>
	{
		hours1=hours2=0;
    12e0:	10 92 6d 00 	sts	0x006D, r1
    12e4:	80 91 6d 00 	lds	r24, 0x006D
    12e8:	80 93 6c 00 	sts	0x006C, r24

	}
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <time_decrement>:

void time_decrement(void)         // Function to decrement time
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	62 97       	sbiw	r28, 0x12	; 18
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	if (secs1 > 0) {               // If seconds1 > 0, decrement seconds1
    130a:	80 91 68 00 	lds	r24, 0x0068
    130e:	88 23       	and	r24, r24
    1310:	31 f0       	breq	.+12     	; 0x131e <time_decrement+0x28>
		secs1--;
    1312:	80 91 68 00 	lds	r24, 0x0068
    1316:	81 50       	subi	r24, 0x01	; 1
    1318:	80 93 68 00 	sts	0x0068, r24
    131c:	5e c0       	rjmp	.+188    	; 0x13da <time_decrement+0xe4>
	} else {
		if (secs2 > 0) {           // If seconds2 > 0, decrement seconds2 and set seconds1 to 9
    131e:	80 91 69 00 	lds	r24, 0x0069
    1322:	88 23       	and	r24, r24
    1324:	49 f0       	breq	.+18     	; 0x1338 <time_decrement+0x42>
			secs2--;
    1326:	80 91 69 00 	lds	r24, 0x0069
    132a:	81 50       	subi	r24, 0x01	; 1
    132c:	80 93 69 00 	sts	0x0069, r24
			secs1 = 9;
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	80 93 68 00 	sts	0x0068, r24
    1336:	51 c0       	rjmp	.+162    	; 0x13da <time_decrement+0xe4>
		} else {
			if (minutes1 > 0) {    // If minutes1 > 0, decrement minutes1, set seconds2 and seconds1
    1338:	80 91 6a 00 	lds	r24, 0x006A
    133c:	88 23       	and	r24, r24
    133e:	61 f0       	breq	.+24     	; 0x1358 <time_decrement+0x62>
				minutes1--;
    1340:	80 91 6a 00 	lds	r24, 0x006A
    1344:	81 50       	subi	r24, 0x01	; 1
    1346:	80 93 6a 00 	sts	0x006A, r24
				secs2 = 5;
    134a:	85 e0       	ldi	r24, 0x05	; 5
    134c:	80 93 69 00 	sts	0x0069, r24
				secs1 = 9;
    1350:	89 e0       	ldi	r24, 0x09	; 9
    1352:	80 93 68 00 	sts	0x0068, r24
    1356:	41 c0       	rjmp	.+130    	; 0x13da <time_decrement+0xe4>
			} else {
				if (minutes2 > 0) { // If minutes2 > 0, decrement minutes2, set other time units
    1358:	80 91 6b 00 	lds	r24, 0x006B
    135c:	88 23       	and	r24, r24
    135e:	79 f0       	breq	.+30     	; 0x137e <time_decrement+0x88>
					minutes2--;
    1360:	80 91 6b 00 	lds	r24, 0x006B
    1364:	81 50       	subi	r24, 0x01	; 1
    1366:	80 93 6b 00 	sts	0x006B, r24
					minutes1 = 9;
    136a:	89 e0       	ldi	r24, 0x09	; 9
    136c:	80 93 6a 00 	sts	0x006A, r24
					secs2 = 5;
    1370:	85 e0       	ldi	r24, 0x05	; 5
    1372:	80 93 69 00 	sts	0x0069, r24
					secs1 = 9;
    1376:	89 e0       	ldi	r24, 0x09	; 9
    1378:	80 93 68 00 	sts	0x0068, r24
    137c:	2e c0       	rjmp	.+92     	; 0x13da <time_decrement+0xe4>
				} else {
					if (hours1 > 0) { // If hours1 > 0, decrement hours1, set other time units
    137e:	80 91 6c 00 	lds	r24, 0x006C
    1382:	88 23       	and	r24, r24
    1384:	91 f0       	breq	.+36     	; 0x13aa <time_decrement+0xb4>
						hours1--;
    1386:	80 91 6c 00 	lds	r24, 0x006C
    138a:	81 50       	subi	r24, 0x01	; 1
    138c:	80 93 6c 00 	sts	0x006C, r24
						minutes2 = 5;
    1390:	85 e0       	ldi	r24, 0x05	; 5
    1392:	80 93 6b 00 	sts	0x006B, r24
						minutes1 = 9;
    1396:	89 e0       	ldi	r24, 0x09	; 9
    1398:	80 93 6a 00 	sts	0x006A, r24
						secs2 = 5;
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	80 93 69 00 	sts	0x0069, r24
						secs1 = 9;
    13a2:	89 e0       	ldi	r24, 0x09	; 9
    13a4:	80 93 68 00 	sts	0x0068, r24
    13a8:	18 c0       	rjmp	.+48     	; 0x13da <time_decrement+0xe4>
					} else {
						if (hours2 > 0) { // If hours2 > 0, decrement hours2, set other time units
    13aa:	80 91 6d 00 	lds	r24, 0x006D
    13ae:	88 23       	and	r24, r24
    13b0:	a1 f0       	breq	.+40     	; 0x13da <time_decrement+0xe4>
							hours2--;
    13b2:	80 91 6d 00 	lds	r24, 0x006D
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	80 93 6d 00 	sts	0x006D, r24
							hours1 = 9;
    13bc:	89 e0       	ldi	r24, 0x09	; 9
    13be:	80 93 6c 00 	sts	0x006C, r24
							minutes2 = 5;
    13c2:	85 e0       	ldi	r24, 0x05	; 5
    13c4:	80 93 6b 00 	sts	0x006B, r24
							minutes1 = 9;
    13c8:	89 e0       	ldi	r24, 0x09	; 9
    13ca:	80 93 6a 00 	sts	0x006A, r24
							secs2 = 5;
    13ce:	85 e0       	ldi	r24, 0x05	; 5
    13d0:	80 93 69 00 	sts	0x0069, r24
							secs1 = 9;
    13d4:	89 e0       	ldi	r24, 0x09	; 9
    13d6:	80 93 68 00 	sts	0x0068, r24
					}
				}
			}
		}
	}
	if((hours2==0)&(hours1==0)&(minutes2==0)&(minutes1==0)&(secs2==0)&(secs1==0)) // If all time units are zero, activate alarm
    13da:	80 91 6d 00 	lds	r24, 0x006D
    13de:	1a 8a       	std	Y+18, r1	; 0x12
    13e0:	88 23       	and	r24, r24
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <time_decrement+0xf2>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	2a 8b       	std	Y+18, r18	; 0x12
    13e8:	80 91 6c 00 	lds	r24, 0x006C
    13ec:	19 8a       	std	Y+17, r1	; 0x11
    13ee:	88 23       	and	r24, r24
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <time_decrement+0x100>
    13f2:	31 e0       	ldi	r19, 0x01	; 1
    13f4:	39 8b       	std	Y+17, r19	; 0x11
    13f6:	8a 89       	ldd	r24, Y+18	; 0x12
    13f8:	99 89       	ldd	r25, Y+17	; 0x11
    13fa:	89 23       	and	r24, r25
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	38 8b       	std	Y+16, r19	; 0x10
    1402:	2f 87       	std	Y+15, r18	; 0x0f
    1404:	80 91 6b 00 	lds	r24, 0x006B
    1408:	1e 86       	std	Y+14, r1	; 0x0e
    140a:	1d 86       	std	Y+13, r1	; 0x0d
    140c:	88 23       	and	r24, r24
    140e:	21 f4       	brne	.+8      	; 0x1418 <time_decrement+0x122>
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e 87       	std	Y+14, r25	; 0x0e
    1416:	8d 87       	std	Y+13, r24	; 0x0d
    1418:	2f 85       	ldd	r18, Y+15	; 0x0f
    141a:	38 89       	ldd	r19, Y+16	; 0x10
    141c:	8d 85       	ldd	r24, Y+13	; 0x0d
    141e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1420:	28 23       	and	r18, r24
    1422:	39 23       	and	r19, r25
    1424:	3c 87       	std	Y+12, r19	; 0x0c
    1426:	2b 87       	std	Y+11, r18	; 0x0b
    1428:	80 91 6a 00 	lds	r24, 0x006A
    142c:	1a 86       	std	Y+10, r1	; 0x0a
    142e:	19 86       	std	Y+9, r1	; 0x09
    1430:	88 23       	and	r24, r24
    1432:	21 f4       	brne	.+8      	; 0x143c <time_decrement+0x146>
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3a 87       	std	Y+10, r19	; 0x0a
    143a:	29 87       	std	Y+9, r18	; 0x09
    143c:	8b 85       	ldd	r24, Y+11	; 0x0b
    143e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1440:	29 85       	ldd	r18, Y+9	; 0x09
    1442:	3a 85       	ldd	r19, Y+10	; 0x0a
    1444:	82 23       	and	r24, r18
    1446:	93 23       	and	r25, r19
    1448:	98 87       	std	Y+8, r25	; 0x08
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	80 91 69 00 	lds	r24, 0x0069
    1450:	1e 82       	std	Y+6, r1	; 0x06
    1452:	1d 82       	std	Y+5, r1	; 0x05
    1454:	88 23       	and	r24, r24
    1456:	21 f4       	brne	.+8      	; 0x1460 <time_decrement+0x16a>
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	2f 81       	ldd	r18, Y+7	; 0x07
    1462:	38 85       	ldd	r19, Y+8	; 0x08
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	28 23       	and	r18, r24
    146a:	39 23       	and	r19, r25
    146c:	3c 83       	std	Y+4, r19	; 0x04
    146e:	2b 83       	std	Y+3, r18	; 0x03
    1470:	80 91 68 00 	lds	r24, 0x0068
    1474:	1a 82       	std	Y+2, r1	; 0x02
    1476:	19 82       	std	Y+1, r1	; 0x01
    1478:	88 23       	and	r24, r24
    147a:	21 f4       	brne	.+8      	; 0x1484 <time_decrement+0x18e>
    147c:	21 e0       	ldi	r18, 0x01	; 1
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3a 83       	std	Y+2, r19	; 0x02
    1482:	29 83       	std	Y+1, r18	; 0x01
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	3a 81       	ldd	r19, Y+2	; 0x02
    148c:	82 23       	and	r24, r18
    148e:	93 23       	and	r25, r19
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	39 f0       	breq	.+14     	; 0x14a2 <time_decrement+0x1ac>
	{
		PORTD|=(1<<PD0);           // Activate alarm on PD0
    1494:	a2 e3       	ldi	r26, 0x32	; 50
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e2 e3       	ldi	r30, 0x32	; 50
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	8c 93       	st	X, r24
	}
}
    14a2:	62 96       	adiw	r28, 0x12	; 18
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <Timer1_set>:

void Timer1_set (void)            // Function to set Timer1
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);                 // Enable global interrupts
    14bc:	af e5       	ldi	r26, 0x5F	; 95
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ef e5       	ldi	r30, 0x5F	; 95
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	8c 93       	st	X, r24
	TCCR1A=(1<<COM1B0)|(1<<COM1B1)|(1<<FOC1B); // Set timer mode
    14ca:	ef e4       	ldi	r30, 0x4F	; 79
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	84 e3       	ldi	r24, 0x34	; 52
    14d0:	80 83       	st	Z, r24
	TCCR1B=(1<<WGM12)|(1<<CS10)|(1<<CS12);     // Set timer mode and prescaler
    14d2:	ee e4       	ldi	r30, 0x4E	; 78
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8d e0       	ldi	r24, 0x0D	; 13
    14d8:	80 83       	st	Z, r24
	TCNT1=0;                       // Reset timer count
    14da:	ec e4       	ldi	r30, 0x4C	; 76
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	11 82       	std	Z+1, r1	; 0x01
    14e0:	10 82       	st	Z, r1
	OCR1A=15625;                   // Set compare value for Timer1
    14e2:	ea e4       	ldi	r30, 0x4A	; 74
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	89 e0       	ldi	r24, 0x09	; 9
    14e8:	9d e3       	ldi	r25, 0x3D	; 61
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	80 83       	st	Z, r24
	TIMSK&=~(1<<OCIE1A);           // Disable Output Compare A Match interrupt
    14ee:	a9 e5       	ldi	r26, 0x59	; 89
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e9 e5       	ldi	r30, 0x59	; 89
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7e       	andi	r24, 0xEF	; 239
    14fa:	8c 93       	st	X, r24
	TIMSK|=(1<<OCIE1B);            // Enable Output Compare B Match interrupt
    14fc:	a9 e5       	ldi	r26, 0x59	; 89
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e9 e5       	ldi	r30, 0x59	; 89
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	88 60       	ori	r24, 0x08	; 8
    1508:	8c 93       	st	X, r24
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <__vector_8>:

ISR (TIMER1_COMPB_vect)           // Interrupt Service Routine for Timer1 Compare B
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	if(flag_toggle==0)             // If toggle flag is 0, increment time
    153a:	80 91 6e 00 	lds	r24, 0x006E
    153e:	88 23       	and	r24, r24
    1540:	19 f4       	brne	.+6      	; 0x1548 <__vector_8+0x38>
	{
		time_increment();
    1542:	0e 94 1c 09 	call	0x1238	; 0x1238 <time_increment>
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <__vector_8+0x44>
	}
	else if(flag_toggle==1)        // If toggle flag is 1, decrement time
    1548:	80 91 6e 00 	lds	r24, 0x006E
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	11 f4       	brne	.+4      	; 0x1554 <__vector_8+0x44>
	{
		time_decrement();
    1550:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <time_decrement>
	}
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <Toggle_button>:
void Toggle_button (void)         // Function to configure the toggle button
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);                 // Enable global interrupts
    1582:	af e5       	ldi	r26, 0x5F	; 95
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e5       	ldi	r30, 0x5F	; 95
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	8c 93       	st	X, r24
	DDRB&=~(1<<PB7);              // Set PB7 as input for the toggle button
    1590:	a7 e3       	ldi	r26, 0x37	; 55
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e7 e3       	ldi	r30, 0x37	; 55
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 77       	andi	r24, 0x7F	; 127
    159c:	8c 93       	st	X, r24
	PORTB|=(1<<PB7);              // Enable pull-up resistor on PB7
    159e:	a8 e3       	ldi	r26, 0x38	; 56
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e8 e3       	ldi	r30, 0x38	; 56
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	8c 93       	st	X, r24
}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <External_Interrupt_INT0>:

void External_Interrupt_INT0 (void) // Function to configure external interrupt INT0 (Reset button)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);                 // Enable global interrupts
    15ba:	af e5       	ldi	r26, 0x5F	; 95
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ef e5       	ldi	r30, 0x5F	; 95
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 68       	ori	r24, 0x80	; 128
    15c6:	8c 93       	st	X, r24
	DDRD&=~(1<<PD2);              // Set PD2 as input for the reset button
    15c8:	a1 e3       	ldi	r26, 0x31	; 49
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e1 e3       	ldi	r30, 0x31	; 49
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8b 7f       	andi	r24, 0xFB	; 251
    15d4:	8c 93       	st	X, r24
	PORTD|=(1<<PD2);              // Enable pull-up resistor on PD2
    15d6:	a2 e3       	ldi	r26, 0x32	; 50
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e2 e3       	ldi	r30, 0x32	; 50
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	84 60       	ori	r24, 0x04	; 4
    15e2:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC01);            // Set INT0 to trigger on falling edge
    15e4:	a5 e5       	ldi	r26, 0x55	; 85
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e5       	ldi	r30, 0x55	; 85
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	82 60       	ori	r24, 0x02	; 2
    15f0:	8c 93       	st	X, r24
	MCUCR&=~(1<<ISC00);           // Ensure ISC00 is cleared (falling edge)
    15f2:	a5 e5       	ldi	r26, 0x55	; 85
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e5       	ldi	r30, 0x55	; 85
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8e 7f       	andi	r24, 0xFE	; 254
    15fe:	8c 93       	st	X, r24
	GICR|=(1<<INT0);              // Enable external interrupt INT0
    1600:	ab e5       	ldi	r26, 0x5B	; 91
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e5       	ldi	r30, 0x5B	; 91
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	8c 93       	st	X, r24
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <__vector_1>:

ISR (INT0_vect)                   // Interrupt Service Routine for INT0 (Reset button)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	a2 97       	sbiw	r28, 0x22	; 34
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	cd bf       	out	0x3d, r28	; 61
	if(flag_pause==0)             // If not paused, reset the timer and flags
    1644:	80 91 6f 00 	lds	r24, 0x006F
    1648:	88 23       	and	r24, r24
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_1+0x3a>
    164c:	9b c0       	rjmp	.+310    	; 0x1784 <__vector_1+0x170>
	{
		TCCR1B=TCCR1A=0;          // Stop Timer1
    164e:	ae e4       	ldi	r26, 0x4E	; 78
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	10 82       	st	Z, r1
    1658:	80 81       	ld	r24, Z
    165a:	8c 93       	st	X, r24
		hours2=hours1=minutes2=minutes1=secs2=secs1=0; // Reset all time counters
    165c:	10 92 68 00 	sts	0x0068, r1
    1660:	80 91 68 00 	lds	r24, 0x0068
    1664:	80 93 69 00 	sts	0x0069, r24
    1668:	80 91 69 00 	lds	r24, 0x0069
    166c:	80 93 6a 00 	sts	0x006A, r24
    1670:	80 91 6a 00 	lds	r24, 0x006A
    1674:	80 93 6b 00 	sts	0x006B, r24
    1678:	80 91 6b 00 	lds	r24, 0x006B
    167c:	80 93 6c 00 	sts	0x006C, r24
    1680:	80 91 6c 00 	lds	r24, 0x006C
    1684:	80 93 6d 00 	sts	0x006D, r24
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e4       	ldi	r27, 0x40	; 64
    1690:	8b 87       	std	Y+11, r24	; 0x0b
    1692:	9c 87       	std	Y+12, r25	; 0x0c
    1694:	ad 87       	std	Y+13, r26	; 0x0d
    1696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a e7       	ldi	r20, 0x7A	; 122
    16a6:	55 e4       	ldi	r21, 0x45	; 69
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8f 83       	std	Y+7, r24	; 0x07
    16b2:	98 87       	std	Y+8, r25	; 0x08
    16b4:	a9 87       	std	Y+9, r26	; 0x09
    16b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <__vector_1+0xc6>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <__vector_1+0x144>
	else if (__tmp > 65535)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <__vector_1+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	0f c0       	rjmp	.+30     	; 0x173a <__vector_1+0x126>
    171c:	80 e9       	ldi	r24, 0x90	; 144
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <__vector_1+0x114>
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <__vector_1+0x108>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <__vector_1+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <__vector_1+0x150>
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Timer1_set();             // Reinitialize Timer1
    176c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Timer1_set>
		PORTD&=~(1<<PD0);         // Turn off alarm (PD0)
    1770:	a2 e3       	ldi	r26, 0x32	; 50
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8e 7f       	andi	r24, 0xFE	; 254
    177c:	8c 93       	st	X, r24
		flag_toggle=0;            // Reset toggle flag
    177e:	10 92 6e 00 	sts	0x006E, r1
    1782:	bc c0       	rjmp	.+376    	; 0x18fc <__vector_1+0x2e8>
	}
	else if((flag_pause==1)&(flag_toggle==1)) // If paused and toggle flag is 1, reset time and flags
    1784:	80 91 6f 00 	lds	r24, 0x006F
    1788:	1a a2       	std	Y+34, r1	; 0x22
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	11 f4       	brne	.+4      	; 0x1792 <__vector_1+0x17e>
    178e:	21 e0       	ldi	r18, 0x01	; 1
    1790:	2a a3       	std	Y+34, r18	; 0x22
    1792:	80 91 6e 00 	lds	r24, 0x006E
    1796:	19 a2       	std	Y+33, r1	; 0x21
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	11 f4       	brne	.+4      	; 0x17a0 <__vector_1+0x18c>
    179c:	31 e0       	ldi	r19, 0x01	; 1
    179e:	39 a3       	std	Y+33, r19	; 0x21
    17a0:	8a a1       	ldd	r24, Y+34	; 0x22
    17a2:	99 a1       	ldd	r25, Y+33	; 0x21
    17a4:	89 23       	and	r24, r25
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__vector_1+0x198>
    17aa:	8c c0       	rjmp	.+280    	; 0x18c4 <__vector_1+0x2b0>
	{
		if((hours2==0)&(hours1==0)&(minutes2==0)&(minutes1==0)&(secs2==0)&(secs1==0)) // Check if time is zero
    17ac:	80 91 6d 00 	lds	r24, 0x006D
    17b0:	18 a2       	std	Y+32, r1	; 0x20
    17b2:	88 23       	and	r24, r24
    17b4:	11 f4       	brne	.+4      	; 0x17ba <__vector_1+0x1a6>
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	28 a3       	std	Y+32, r18	; 0x20
    17ba:	80 91 6c 00 	lds	r24, 0x006C
    17be:	1f 8e       	std	Y+31, r1	; 0x1f
    17c0:	88 23       	and	r24, r24
    17c2:	11 f4       	brne	.+4      	; 0x17c8 <__vector_1+0x1b4>
    17c4:	31 e0       	ldi	r19, 0x01	; 1
    17c6:	3f 8f       	std	Y+31, r19	; 0x1f
    17c8:	88 a1       	ldd	r24, Y+32	; 0x20
    17ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17cc:	89 23       	and	r24, r25
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3e 8f       	std	Y+30, r19	; 0x1e
    17d4:	2d 8f       	std	Y+29, r18	; 0x1d
    17d6:	80 91 6b 00 	lds	r24, 0x006B
    17da:	1c 8e       	std	Y+28, r1	; 0x1c
    17dc:	1b 8e       	std	Y+27, r1	; 0x1b
    17de:	88 23       	and	r24, r24
    17e0:	21 f4       	brne	.+8      	; 0x17ea <__vector_1+0x1d6>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9c 8f       	std	Y+28, r25	; 0x1c
    17e8:	8b 8f       	std	Y+27, r24	; 0x1b
    17ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f2:	28 23       	and	r18, r24
    17f4:	39 23       	and	r19, r25
    17f6:	3a 8f       	std	Y+26, r19	; 0x1a
    17f8:	29 8f       	std	Y+25, r18	; 0x19
    17fa:	80 91 6a 00 	lds	r24, 0x006A
    17fe:	18 8e       	std	Y+24, r1	; 0x18
    1800:	1f 8a       	std	Y+23, r1	; 0x17
    1802:	88 23       	and	r24, r24
    1804:	21 f4       	brne	.+8      	; 0x180e <__vector_1+0x1fa>
    1806:	21 e0       	ldi	r18, 0x01	; 1
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	38 8f       	std	Y+24, r19	; 0x18
    180c:	2f 8b       	std	Y+23, r18	; 0x17
    180e:	89 8d       	ldd	r24, Y+25	; 0x19
    1810:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1812:	2f 89       	ldd	r18, Y+23	; 0x17
    1814:	38 8d       	ldd	r19, Y+24	; 0x18
    1816:	82 23       	and	r24, r18
    1818:	93 23       	and	r25, r19
    181a:	9e 8b       	std	Y+22, r25	; 0x16
    181c:	8d 8b       	std	Y+21, r24	; 0x15
    181e:	80 91 69 00 	lds	r24, 0x0069
    1822:	1c 8a       	std	Y+20, r1	; 0x14
    1824:	1b 8a       	std	Y+19, r1	; 0x13
    1826:	88 23       	and	r24, r24
    1828:	21 f4       	brne	.+8      	; 0x1832 <__vector_1+0x21e>
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9c 8b       	std	Y+20, r25	; 0x14
    1830:	8b 8b       	std	Y+19, r24	; 0x13
    1832:	2d 89       	ldd	r18, Y+21	; 0x15
    1834:	3e 89       	ldd	r19, Y+22	; 0x16
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	28 23       	and	r18, r24
    183c:	39 23       	and	r19, r25
    183e:	3a 8b       	std	Y+18, r19	; 0x12
    1840:	29 8b       	std	Y+17, r18	; 0x11
    1842:	80 91 68 00 	lds	r24, 0x0068
    1846:	18 8a       	std	Y+16, r1	; 0x10
    1848:	1f 86       	std	Y+15, r1	; 0x0f
    184a:	88 23       	and	r24, r24
    184c:	21 f4       	brne	.+8      	; 0x1856 <__vector_1+0x242>
    184e:	21 e0       	ldi	r18, 0x01	; 1
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	38 8b       	std	Y+16, r19	; 0x10
    1854:	2f 87       	std	Y+15, r18	; 0x0f
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	9a 89       	ldd	r25, Y+18	; 0x12
    185a:	2f 85       	ldd	r18, Y+15	; 0x0f
    185c:	38 89       	ldd	r19, Y+16	; 0x10
    185e:	82 23       	and	r24, r18
    1860:	93 23       	and	r25, r19
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	71 f0       	breq	.+28     	; 0x1882 <__vector_1+0x26e>
		{
			flag_pause=0;         // Reset pause flag
    1866:	10 92 6f 00 	sts	0x006F, r1
			flag_toggle=0;        // Reset toggle flag
    186a:	10 92 6e 00 	sts	0x006E, r1
			Timer1_set();         // Reinitialize Timer1
    186e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Timer1_set>
			PORTD&=~(1<<PD0);     // Turn off alarm (PD0)
    1872:	a2 e3       	ldi	r26, 0x32	; 50
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e2 e3       	ldi	r30, 0x32	; 50
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8e 7f       	andi	r24, 0xFE	; 254
    187e:	8c 93       	st	X, r24
    1880:	3d c0       	rjmp	.+122    	; 0x18fc <__vector_1+0x2e8>
		}
		else                     // If time is not zero, reset time and stop the timer
		{
			TCCR1B=0;            // Stop Timer1
    1882:	ee e4       	ldi	r30, 0x4E	; 78
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	10 82       	st	Z, r1
			hours2=hours1=minutes2=minutes1=secs2=secs1=0; // Reset all time counters
    1888:	10 92 68 00 	sts	0x0068, r1
    188c:	80 91 68 00 	lds	r24, 0x0068
    1890:	80 93 69 00 	sts	0x0069, r24
    1894:	80 91 69 00 	lds	r24, 0x0069
    1898:	80 93 6a 00 	sts	0x006A, r24
    189c:	80 91 6a 00 	lds	r24, 0x006A
    18a0:	80 93 6b 00 	sts	0x006B, r24
    18a4:	80 91 6b 00 	lds	r24, 0x006B
    18a8:	80 93 6c 00 	sts	0x006C, r24
    18ac:	80 91 6c 00 	lds	r24, 0x006C
    18b0:	80 93 6d 00 	sts	0x006D, r24
			PORTD&=~(1<<PD0);    // Turn off alarm (PD0)
    18b4:	a2 e3       	ldi	r26, 0x32	; 50
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e2 e3       	ldi	r30, 0x32	; 50
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8e 7f       	andi	r24, 0xFE	; 254
    18c0:	8c 93       	st	X, r24
    18c2:	1c c0       	rjmp	.+56     	; 0x18fc <__vector_1+0x2e8>
		}
	}
	else{
		hours2=hours1=minutes2=minutes1=secs2=secs1=0;       //Reset Timer
    18c4:	10 92 68 00 	sts	0x0068, r1
    18c8:	80 91 68 00 	lds	r24, 0x0068
    18cc:	80 93 69 00 	sts	0x0069, r24
    18d0:	80 91 69 00 	lds	r24, 0x0069
    18d4:	80 93 6a 00 	sts	0x006A, r24
    18d8:	80 91 6a 00 	lds	r24, 0x006A
    18dc:	80 93 6b 00 	sts	0x006B, r24
    18e0:	80 91 6b 00 	lds	r24, 0x006B
    18e4:	80 93 6c 00 	sts	0x006C, r24
    18e8:	80 91 6c 00 	lds	r24, 0x006C
    18ec:	80 93 6d 00 	sts	0x006D, r24
		flag_pause=0;                                        // Reset pause flag
    18f0:	10 92 6f 00 	sts	0x006F, r1
		flag_toggle=0;                                       // Reset toggle flag
    18f4:	10 92 6e 00 	sts	0x006E, r1
		Timer1_set();                                        // Reinitialize Timer1
    18f8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Timer1_set>
	}
}
    18fc:	a2 96       	adiw	r28, 0x22	; 34
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	bf 91       	pop	r27
    190c:	af 91       	pop	r26
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	7f 91       	pop	r23
    1914:	6f 91       	pop	r22
    1916:	5f 91       	pop	r21
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <External_Interrupt_INT1>:

void External_Interrupt_INT1 (void) // Function to configure external interrupt INT1 (Pause button)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);                 // Enable global interrupts
    1930:	af e5       	ldi	r26, 0x5F	; 95
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ef e5       	ldi	r30, 0x5F	; 95
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	8c 93       	st	X, r24
	DDRD&=~(1<<PD3);              // Set PD3 as input for the pause button
    193e:	a1 e3       	ldi	r26, 0x31	; 49
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e1 e3       	ldi	r30, 0x31	; 49
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	87 7f       	andi	r24, 0xF7	; 247
    194a:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC10)|(1<<ISC11); // Set INT1 to trigger on rising edge
    194c:	a5 e5       	ldi	r26, 0x55	; 85
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e5 e5       	ldi	r30, 0x55	; 85
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8c 60       	ori	r24, 0x0C	; 12
    1958:	8c 93       	st	X, r24
	GICR|=(1<<INT1);              // Enable external interrupt INT1
    195a:	ab e5       	ldi	r26, 0x5B	; 91
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	eb e5       	ldi	r30, 0x5B	; 91
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 68       	ori	r24, 0x80	; 128
    1966:	8c 93       	st	X, r24
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <__vector_2>:

ISR (INT1_vect)                   // Interrupt Service Routine for INT1 (Pause button)
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	8f 93       	push	r24
    197a:	af 93       	push	r26
    197c:	bf 93       	push	r27
    197e:	ef 93       	push	r30
    1980:	ff 93       	push	r31
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;                     // Stop Timer1
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	10 82       	st	Z, r1
	PORTD&=~(1<<PD0);             // Turn off alarm (PD0)
    1990:	a2 e3       	ldi	r26, 0x32	; 50
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e2 e3       	ldi	r30, 0x32	; 50
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8e 7f       	andi	r24, 0xFE	; 254
    199c:	8c 93       	st	X, r24
	if(flag_toggle==1)            // If toggle flag is 1, set pause flag
    199e:	80 91 6e 00 	lds	r24, 0x006E
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	19 f4       	brne	.+6      	; 0x19ac <__vector_2+0x3e>
	{
		flag_pause=1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 6f 00 	sts	0x006F, r24
	}
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	8f 91       	pop	r24
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <External_Interrupt_INT2>:

void External_Interrupt_INT2 (void) // Function to configure external interrupt INT2 (Resume button)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);                 // Enable global interrupts
    19cc:	af e5       	ldi	r26, 0x5F	; 95
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ef e5       	ldi	r30, 0x5F	; 95
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 68       	ori	r24, 0x80	; 128
    19d8:	8c 93       	st	X, r24
	DDRB|=(1<<PB2);               // Set PB2 as input for the resume button
    19da:	a7 e3       	ldi	r26, 0x37	; 55
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e7 e3       	ldi	r30, 0x37	; 55
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	84 60       	ori	r24, 0x04	; 4
    19e6:	8c 93       	st	X, r24
	PORTB|=(1<<PB2);              // Enable pull-up resistor on PB2
    19e8:	a8 e3       	ldi	r26, 0x38	; 56
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e8 e3       	ldi	r30, 0x38	; 56
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	84 60       	ori	r24, 0x04	; 4
    19f4:	8c 93       	st	X, r24
	MCUCR&=~(1<<ISC2);            // Ensure ISC2 is cleared (falling edge trigger)
    19f6:	a5 e5       	ldi	r26, 0x55	; 85
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e5       	ldi	r30, 0x55	; 85
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7b       	andi	r24, 0xBF	; 191
    1a02:	8c 93       	st	X, r24
	GICR|=(1<<INT2);              // Enable external interrupt INT2
    1a04:	ab e5       	ldi	r26, 0x5B	; 91
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	eb e5       	ldi	r30, 0x5B	; 91
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	80 62       	ori	r24, 0x20	; 32
    1a10:	8c 93       	st	X, r24
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <__vector_3>:

ISR (INT2_vect)                   // Interrupt Service Routine for INT2 (Resume button)
{
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	8f 93       	push	r24
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=(1<<WGM12)|(1<<CS10)|(1<<CS12); // Restart Timer1
    1a30:	ee e4       	ldi	r30, 0x4E	; 78
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8d e0       	ldi	r24, 0x0D	; 13
    1a36:	80 83       	st	Z, r24
	flag_pause=0;                 // Reset pause flag
    1a38:	10 92 6f 00 	sts	0x006F, r1
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	8f 91       	pop	r24
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0f 90       	pop	r0
    1a4c:	1f 90       	pop	r1
    1a4e:	18 95       	reti

00001a50 <sec_buttons>:

void sec_buttons (void)           // Function to configure buttons for seconds adjustment
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB6)&~(1<<PB5);    // Set PB6 and PB5 as inputs for seconds adjustment buttons
    1a58:	a7 e3       	ldi	r26, 0x37	; 55
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e7 e3       	ldi	r30, 0x37	; 55
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 79       	andi	r24, 0x9F	; 159
    1a64:	8c 93       	st	X, r24
	PORTB|=(1<<PB6)|(1<<PB5);     // Enable pull-up resistors on PB6 and PB5
    1a66:	a8 e3       	ldi	r26, 0x38	; 56
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e8 e3       	ldi	r30, 0x38	; 56
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 66       	ori	r24, 0x60	; 96
    1a72:	8c 93       	st	X, r24
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <minute_buttons>:

void minute_buttons(void)         // Function to configure buttons for minutes adjustment
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB4)&~(1<<PB3);    // Set PB4 and PB3 as inputs for minutes adjustment buttons
    1a82:	a7 e3       	ldi	r26, 0x37	; 55
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e7 e3       	ldi	r30, 0x37	; 55
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	87 7e       	andi	r24, 0xE7	; 231
    1a8e:	8c 93       	st	X, r24
	PORTB|=(1<<PB4)|(1<<PB3);     // Enable pull-up resistors on PB4 and PB3
    1a90:	a8 e3       	ldi	r26, 0x38	; 56
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e8 e3       	ldi	r30, 0x38	; 56
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 61       	ori	r24, 0x18	; 24
    1a9c:	8c 93       	st	X, r24
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <hour_buttons>:

void hour_buttons(void)           // Function to configure buttons for hours adjustment
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB1)&~(1<<PB0);    // Set PB1 and PB0 as inputs for hours adjustment buttons
    1aac:	a7 e3       	ldi	r26, 0x37	; 55
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e3       	ldi	r30, 0x37	; 55
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8c 7f       	andi	r24, 0xFC	; 252
    1ab8:	8c 93       	st	X, r24
	PORTB|=(1<<PB1)|(1<<PB0);     // Enable pull-up resistors on PB1 and PB0
    1aba:	a8 e3       	ldi	r26, 0x38	; 56
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e8 e3       	ldi	r30, 0x38	; 56
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	83 60       	ori	r24, 0x03	; 3
    1ac6:	8c 93       	st	X, r24
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <time_setting>:

void time_setting (void)          // Function to handle time setting using buttons
{
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	c5 56       	subi	r28, 0x65	; 101
    1adc:	d0 40       	sbci	r29, 0x00	; 0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB&(1<<PB6)))          // If seconds increment button (PB6) is pressed
    1ae8:	e6 e3       	ldi	r30, 0x36	; 54
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	80 74       	andi	r24, 0x40	; 64
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	09 f0       	breq	.+2      	; 0x1afc <time_setting+0x2e>
    1afa:	e0 c0       	rjmp	.+448    	; 0x1cbc <time_setting+0x1ee>
    1afc:	fe 01       	movw	r30, r28
    1afe:	ef 5a       	subi	r30, 0xAF	; 175
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 ef       	ldi	r26, 0xF0	; 240
    1b08:	b1 e4       	ldi	r27, 0x41	; 65
    1b0a:	80 83       	st	Z, r24
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	a2 83       	std	Z+2, r26	; 0x02
    1b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	8e 01       	movw	r16, r28
    1b14:	03 5b       	subi	r16, 0xB3	; 179
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 5a       	subi	r30, 0xAF	; 175
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	55 e4       	ldi	r21, 0x45	; 69
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e3 5b       	subi	r30, 0xB3	; 179
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	44 f4       	brge	.+16     	; 0x1b6e <time_setting+0xa0>
		__ticks = 1;
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e5 5b       	subi	r30, 0xB5	; 181
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	64 c0       	rjmp	.+200    	; 0x1c36 <time_setting+0x168>
	else if (__tmp > 65535)
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e3 5b       	subi	r30, 0xB3	; 179
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	0c f0       	brlt	.+2      	; 0x1b8e <time_setting+0xc0>
    1b8c:	43 c0       	rjmp	.+134    	; 0x1c14 <time_setting+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ef 5a       	subi	r30, 0xAF	; 175
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8e 01       	movw	r16, r28
    1bae:	05 5b       	subi	r16, 0xB5	; 181
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <time_setting+0x136>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e7 5b       	subi	r30, 0xB7	; 183
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 e9       	ldi	r24, 0x90	; 144
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e7 5b       	subi	r30, 0xB7	; 183
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <time_setting+0x110>
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 5b       	subi	r30, 0xB7	; 183
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	de 01       	movw	r26, r28
    1bee:	a5 5b       	subi	r26, 0xB5	; 181
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e5 5b       	subi	r30, 0xB5	; 181
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	fe 01       	movw	r30, r28
    1c06:	e5 5b       	subi	r30, 0xB5	; 181
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	d1 f6       	brne	.-76     	; 0x1bc6 <time_setting+0xf8>
    1c12:	28 c0       	rjmp	.+80     	; 0x1c64 <time_setting+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	8e 01       	movw	r16, r28
    1c16:	05 5b       	subi	r16, 0xB5	; 181
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e3 5b       	subi	r30, 0xB3	; 179
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	de 01       	movw	r26, r28
    1c38:	a9 5b       	subi	r26, 0xB9	; 185
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e5 5b       	subi	r30, 0xB5	; 181
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 93       	st	X, r25
    1c4a:	8e 93       	st	-X, r24
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e9 5b       	subi	r30, 0xB9	; 185
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <time_setting+0x188>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e9 5b       	subi	r30, 0xB9	; 185
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB6)))      // Check if the button is still pressed
    1c64:	e6 e3       	ldi	r30, 0x36	; 54
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	80 74       	andi	r24, 0x40	; 64
    1c70:	90 70       	andi	r25, 0x00	; 0
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	c9 f4       	brne	.+50     	; 0x1ca8 <time_setting+0x1da>
		{
			secs1++;              // Increment seconds1
    1c76:	80 91 68 00 	lds	r24, 0x0068
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
    1c7c:	80 93 68 00 	sts	0x0068, r24
			if(secs1==10)         // Reset seconds1 and increment seconds2 if necessary
    1c80:	80 91 68 00 	lds	r24, 0x0068
    1c84:	8a 30       	cpi	r24, 0x0A	; 10
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <time_setting+0x1c8>
			{
				secs1=0;
    1c88:	10 92 68 00 	sts	0x0068, r1
				secs2++;
    1c8c:	80 91 69 00 	lds	r24, 0x0069
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	80 93 69 00 	sts	0x0069, r24
			}
			if(secs2==6)          // Reset seconds2 if necessary
    1c96:	80 91 69 00 	lds	r24, 0x0069
    1c9a:	86 30       	cpi	r24, 0x06	; 6
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <time_setting+0x1da>
			{
				secs2=0;
    1c9e:	10 92 69 00 	sts	0x0069, r1
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <time_setting+0x1da>
			}
		}
		while(!(PINB&(1<<PB6)))   // Display the time while button is pressed
		{
			display();
    1ca4:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			if(secs2==6)          // Reset seconds2 if necessary
			{
				secs2=0;
			}
		}
		while(!(PINB&(1<<PB6)))   // Display the time while button is pressed
    1ca8:	e6 e3       	ldi	r30, 0x36	; 54
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	80 74       	andi	r24, 0x40	; 64
    1cb4:	90 70       	andi	r25, 0x00	; 0
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	a9 f3       	breq	.-22     	; 0x1ca4 <time_setting+0x1d6>
    1cba:	01 c1       	rjmp	.+514    	; 0x1ebe <time_setting+0x3f0>
		{
			display();
		};
	}
	else if(!(PINB&(1<<PB5)))     // If seconds decrement button (PB5) is pressed
    1cbc:	e6 e3       	ldi	r30, 0x36	; 54
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	80 72       	andi	r24, 0x20	; 32
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <time_setting+0x202>
    1cce:	f7 c0       	rjmp	.+494    	; 0x1ebe <time_setting+0x3f0>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ed 5b       	subi	r30, 0xBD	; 189
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 ef       	ldi	r26, 0xF0	; 240
    1cdc:	b1 e4       	ldi	r27, 0x41	; 65
    1cde:	80 83       	st	Z, r24
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	a2 83       	std	Z+2, r26	; 0x02
    1ce4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	01 5c       	subi	r16, 0xC1	; 193
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	fe 01       	movw	r30, r28
    1cee:	ed 5b       	subi	r30, 0xBD	; 189
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a e7       	ldi	r20, 0x7A	; 122
    1d00:	55 e4       	ldi	r21, 0x45	; 69
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d14:	fe 01       	movw	r30, r28
    1d16:	ff 96       	adiw	r30, 0x3f	; 63
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <time_setting+0x26c>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9e af       	std	Y+62, r25	; 0x3e
    1d36:	8d af       	std	Y+61, r24	; 0x3d
    1d38:	46 c0       	rjmp	.+140    	; 0x1dc6 <time_setting+0x2f8>
	else if (__tmp > 65535)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ff 96       	adiw	r30, 0x3f	; 63
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	64 f5       	brge	.+88     	; 0x1dae <time_setting+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	fe 01       	movw	r30, r28
    1d58:	ed 5b       	subi	r30, 0xBD	; 189
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e af       	std	Y+62, r25	; 0x3e
    1d82:	8d af       	std	Y+61, r24	; 0x3d
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <time_setting+0x2d6>
    1d86:	80 e9       	ldi	r24, 0x90	; 144
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	9c af       	std	Y+60, r25	; 0x3c
    1d8c:	8b af       	std	Y+59, r24	; 0x3b
    1d8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <time_setting+0x2c4>
    1d96:	9c af       	std	Y+60, r25	; 0x3c
    1d98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e af       	std	Y+62, r25	; 0x3e
    1da2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1da6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <time_setting+0x2b8>
    1dac:	16 c0       	rjmp	.+44     	; 0x1dda <time_setting+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	fe 01       	movw	r30, r28
    1db0:	ff 96       	adiw	r30, 0x3f	; 63
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9e af       	std	Y+62, r25	; 0x3e
    1dc4:	8d af       	std	Y+61, r24	; 0x3d
    1dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dca:	9a af       	std	Y+58, r25	; 0x3a
    1dcc:	89 af       	std	Y+57, r24	; 0x39
    1dce:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <time_setting+0x304>
    1dd6:	9a af       	std	Y+58, r25	; 0x3a
    1dd8:	89 af       	std	Y+57, r24	; 0x39
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB5)))      // Check if the button is still pressed
    1dda:	e6 e3       	ldi	r30, 0x36	; 54
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 72       	andi	r24, 0x20	; 32
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	09 f0       	breq	.+2      	; 0x1dee <time_setting+0x320>
    1dec:	5f c0       	rjmp	.+190    	; 0x1eac <time_setting+0x3de>
		{
			if((secs1==0)&(secs2==0)) // Handle decrementing seconds
    1dee:	80 91 68 00 	lds	r24, 0x0068
    1df2:	a3 96       	adiw	r28, 0x23	; 35
    1df4:	1f ae       	std	Y+63, r1	; 0x3f
    1df6:	a3 97       	sbiw	r28, 0x23	; 35
    1df8:	88 23       	and	r24, r24
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <time_setting+0x336>
    1dfc:	f1 e0       	ldi	r31, 0x01	; 1
    1dfe:	a3 96       	adiw	r28, 0x23	; 35
    1e00:	ff af       	std	Y+63, r31	; 0x3f
    1e02:	a3 97       	sbiw	r28, 0x23	; 35
    1e04:	80 91 69 00 	lds	r24, 0x0069
    1e08:	a2 96       	adiw	r28, 0x22	; 34
    1e0a:	1f ae       	std	Y+63, r1	; 0x3f
    1e0c:	a2 97       	sbiw	r28, 0x22	; 34
    1e0e:	88 23       	and	r24, r24
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <time_setting+0x34c>
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	a2 96       	adiw	r28, 0x22	; 34
    1e16:	8f af       	std	Y+63, r24	; 0x3f
    1e18:	a2 97       	sbiw	r28, 0x22	; 34
    1e1a:	a3 96       	adiw	r28, 0x23	; 35
    1e1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e1e:	a3 97       	sbiw	r28, 0x23	; 35
    1e20:	a2 96       	adiw	r28, 0x22	; 34
    1e22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e24:	a2 97       	sbiw	r28, 0x22	; 34
    1e26:	89 23       	and	r24, r25
    1e28:	88 23       	and	r24, r24
    1e2a:	39 f0       	breq	.+14     	; 0x1e3a <time_setting+0x36c>
			{
				secs1=9;
    1e2c:	89 e0       	ldi	r24, 0x09	; 9
    1e2e:	80 93 68 00 	sts	0x0068, r24
				secs2=5;
    1e32:	85 e0       	ldi	r24, 0x05	; 5
    1e34:	80 93 69 00 	sts	0x0069, r24
    1e38:	39 c0       	rjmp	.+114    	; 0x1eac <time_setting+0x3de>
			}
			else if((secs2>0)&(secs1==0))
    1e3a:	80 91 69 00 	lds	r24, 0x0069
    1e3e:	a4 96       	adiw	r28, 0x24	; 36
    1e40:	8f af       	std	Y+63, r24	; 0x3f
    1e42:	a4 97       	sbiw	r28, 0x24	; 36
    1e44:	a4 96       	adiw	r28, 0x24	; 36
    1e46:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e48:	a4 97       	sbiw	r28, 0x24	; 36
    1e4a:	ee 23       	and	r30, r30
    1e4c:	21 f0       	breq	.+8      	; 0x1e56 <time_setting+0x388>
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	a4 96       	adiw	r28, 0x24	; 36
    1e52:	ff af       	std	Y+63, r31	; 0x3f
    1e54:	a4 97       	sbiw	r28, 0x24	; 36
    1e56:	a4 96       	adiw	r28, 0x24	; 36
    1e58:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e5a:	a4 97       	sbiw	r28, 0x24	; 36
    1e5c:	a1 96       	adiw	r28, 0x21	; 33
    1e5e:	8f af       	std	Y+63, r24	; 0x3f
    1e60:	a1 97       	sbiw	r28, 0x21	; 33
    1e62:	80 91 68 00 	lds	r24, 0x0068
    1e66:	a0 96       	adiw	r28, 0x20	; 32
    1e68:	1f ae       	std	Y+63, r1	; 0x3f
    1e6a:	a0 97       	sbiw	r28, 0x20	; 32
    1e6c:	88 23       	and	r24, r24
    1e6e:	21 f4       	brne	.+8      	; 0x1e78 <time_setting+0x3aa>
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	a0 96       	adiw	r28, 0x20	; 32
    1e74:	9f af       	std	Y+63, r25	; 0x3f
    1e76:	a0 97       	sbiw	r28, 0x20	; 32
    1e78:	a1 96       	adiw	r28, 0x21	; 33
    1e7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e7c:	a1 97       	sbiw	r28, 0x21	; 33
    1e7e:	a0 96       	adiw	r28, 0x20	; 32
    1e80:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e82:	a0 97       	sbiw	r28, 0x20	; 32
    1e84:	8e 23       	and	r24, r30
    1e86:	88 23       	and	r24, r24
    1e88:	49 f0       	breq	.+18     	; 0x1e9c <time_setting+0x3ce>
			{
				secs2--;
    1e8a:	80 91 69 00 	lds	r24, 0x0069
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	80 93 69 00 	sts	0x0069, r24
				secs1=9;
    1e94:	89 e0       	ldi	r24, 0x09	; 9
    1e96:	80 93 68 00 	sts	0x0068, r24
    1e9a:	08 c0       	rjmp	.+16     	; 0x1eac <time_setting+0x3de>
			}
			else{
				secs1--;
    1e9c:	80 91 68 00 	lds	r24, 0x0068
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	80 93 68 00 	sts	0x0068, r24
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <time_setting+0x3de>
			}
		}
		while(!(PINB&(1<<PB5)))   // Display the time while button is pressed
		{
			display();
    1ea8:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			}
			else{
				secs1--;
			}
		}
		while(!(PINB&(1<<PB5)))   // Display the time while button is pressed
    1eac:	e6 e3       	ldi	r30, 0x36	; 54
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	80 72       	andi	r24, 0x20	; 32
    1eb8:	90 70       	andi	r25, 0x00	; 0
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	a9 f3       	breq	.-22     	; 0x1ea8 <time_setting+0x3da>
		{
			display();
		}
	}
	if(!(PINB&(1<<PB4)))          // If minutes increment button (PB4) is pressed
    1ebe:	e6 e3       	ldi	r30, 0x36	; 54
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	80 71       	andi	r24, 0x10	; 16
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <time_setting+0x404>
    1ed0:	9e c0       	rjmp	.+316    	; 0x200e <time_setting+0x540>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 ef       	ldi	r26, 0xF0	; 240
    1ed8:	b1 e4       	ldi	r27, 0x41	; 65
    1eda:	8d ab       	std	Y+53, r24	; 0x35
    1edc:	9e ab       	std	Y+54, r25	; 0x36
    1ede:	af ab       	std	Y+55, r26	; 0x37
    1ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	55 e4       	ldi	r21, 0x45	; 69
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	89 ab       	std	Y+49, r24	; 0x31
    1efc:	9a ab       	std	Y+50, r25	; 0x32
    1efe:	ab ab       	std	Y+51, r26	; 0x33
    1f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <time_setting+0x456>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <time_setting+0x4d4>
	else if (__tmp > 65535)
    1f24:	69 a9       	ldd	r22, Y+49	; 0x31
    1f26:	7a a9       	ldd	r23, Y+50	; 0x32
    1f28:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <time_setting+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f40:	8f a9       	ldd	r24, Y+55	; 0x37
    1f42:	98 ad       	ldd	r25, Y+56	; 0x38
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <time_setting+0x4b6>
    1f66:	80 e9       	ldi	r24, 0x90	; 144
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	9e a7       	std	Y+46, r25	; 0x2e
    1f6c:	8d a7       	std	Y+45, r24	; 0x2d
    1f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <time_setting+0x4a4>
    1f76:	9e a7       	std	Y+46, r25	; 0x2e
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <time_setting+0x498>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <time_setting+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f90:	7a a9       	ldd	r23, Y+50	; 0x32
    1f92:	8b a9       	ldd	r24, Y+51	; 0x33
    1f94:	9c a9       	ldd	r25, Y+52	; 0x34
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	98 ab       	std	Y+48, r25	; 0x30
    1fa0:	8f a7       	std	Y+47, r24	; 0x2f
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	9c a7       	std	Y+44, r25	; 0x2c
    1fa8:	8b a7       	std	Y+43, r24	; 0x2b
    1faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <time_setting+0x4e0>
    1fb2:	9c a7       	std	Y+44, r25	; 0x2c
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB4)))      // Check if the button is still pressed
    1fb6:	e6 e3       	ldi	r30, 0x36	; 54
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	80 71       	andi	r24, 0x10	; 16
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	c9 f4       	brne	.+50     	; 0x1ffa <time_setting+0x52c>
		{
			minutes1++;           // Increment minutes1
    1fc8:	80 91 6a 00 	lds	r24, 0x006A
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
    1fce:	80 93 6a 00 	sts	0x006A, r24
			if(minutes1==10)      // Reset minutes1 and increment minutes2 if necessary
    1fd2:	80 91 6a 00 	lds	r24, 0x006A
    1fd6:	8a 30       	cpi	r24, 0x0A	; 10
    1fd8:	39 f4       	brne	.+14     	; 0x1fe8 <time_setting+0x51a>
			{
				minutes1=0;
    1fda:	10 92 6a 00 	sts	0x006A, r1
				minutes2++;
    1fde:	80 91 6b 00 	lds	r24, 0x006B
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	80 93 6b 00 	sts	0x006B, r24
			}
			if(minutes2==6)       // Reset minutes2 if necessary
    1fe8:	80 91 6b 00 	lds	r24, 0x006B
    1fec:	86 30       	cpi	r24, 0x06	; 6
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <time_setting+0x52c>
			{
				minutes2=0;
    1ff0:	10 92 6b 00 	sts	0x006B, r1
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <time_setting+0x52c>
			}
		}
		while(!(PINB&(1<<PB4)))   // Display the time while button is pressed
		{
			display();
    1ff6:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			if(minutes2==6)       // Reset minutes2 if necessary
			{
				minutes2=0;
			}
		}
		while(!(PINB&(1<<PB4)))   // Display the time while button is pressed
    1ffa:	e6 e3       	ldi	r30, 0x36	; 54
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	80 71       	andi	r24, 0x10	; 16
    2006:	90 70       	andi	r25, 0x00	; 0
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	a9 f3       	breq	.-22     	; 0x1ff6 <time_setting+0x528>
    200c:	ee c0       	rjmp	.+476    	; 0x21ea <time_setting+0x71c>
		{
			display();
		}
	}
	else if(!(PINB&(1<<PB3)))     // If minutes decrement button (PB3) is pressed
    200e:	e6 e3       	ldi	r30, 0x36	; 54
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	88 70       	andi	r24, 0x08	; 8
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	09 f0       	breq	.+2      	; 0x2022 <time_setting+0x554>
    2020:	e4 c0       	rjmp	.+456    	; 0x21ea <time_setting+0x71c>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 ef       	ldi	r26, 0xF0	; 240
    2028:	b1 e4       	ldi	r27, 0x41	; 65
    202a:	8f a3       	std	Y+39, r24	; 0x27
    202c:	98 a7       	std	Y+40, r25	; 0x28
    202e:	a9 a7       	std	Y+41, r26	; 0x29
    2030:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6f a1       	ldd	r22, Y+39	; 0x27
    2034:	78 a5       	ldd	r23, Y+40	; 0x28
    2036:	89 a5       	ldd	r24, Y+41	; 0x29
    2038:	9a a5       	ldd	r25, Y+42	; 0x2a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	55 e4       	ldi	r21, 0x45	; 69
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8b a3       	std	Y+35, r24	; 0x23
    204c:	9c a3       	std	Y+36, r25	; 0x24
    204e:	ad a3       	std	Y+37, r26	; 0x25
    2050:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2052:	6b a1       	ldd	r22, Y+35	; 0x23
    2054:	7c a1       	ldd	r23, Y+36	; 0x24
    2056:	8d a1       	ldd	r24, Y+37	; 0x25
    2058:	9e a1       	ldd	r25, Y+38	; 0x26
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <time_setting+0x5a6>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <time_setting+0x624>
	else if (__tmp > 65535)
    2074:	6b a1       	ldd	r22, Y+35	; 0x23
    2076:	7c a1       	ldd	r23, Y+36	; 0x24
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	9e a1       	ldd	r25, Y+38	; 0x26
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <time_setting+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6f a1       	ldd	r22, Y+39	; 0x27
    208e:	78 a5       	ldd	r23, Y+40	; 0x28
    2090:	89 a5       	ldd	r24, Y+41	; 0x29
    2092:	9a a5       	ldd	r25, Y+42	; 0x2a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <time_setting+0x606>
    20b6:	80 e9       	ldi	r24, 0x90	; 144
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	98 a3       	std	Y+32, r25	; 0x20
    20bc:	8f 8f       	std	Y+31, r24	; 0x1f
    20be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c0:	98 a1       	ldd	r25, Y+32	; 0x20
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <time_setting+0x5f4>
    20c6:	98 a3       	std	Y+32, r25	; 0x20
    20c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <time_setting+0x5e8>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <time_setting+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6b a1       	ldd	r22, Y+35	; 0x23
    20e0:	7c a1       	ldd	r23, Y+36	; 0x24
    20e2:	8d a1       	ldd	r24, Y+37	; 0x25
    20e4:	9e a1       	ldd	r25, Y+38	; 0x26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9a a3       	std	Y+34, r25	; 0x22
    20f0:	89 a3       	std	Y+33, r24	; 0x21
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	9e 8f       	std	Y+30, r25	; 0x1e
    20f8:	8d 8f       	std	Y+29, r24	; 0x1d
    20fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <time_setting+0x630>
    2102:	9e 8f       	std	Y+30, r25	; 0x1e
    2104:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB3)))      // Check if the button is still pressed
    2106:	e6 e3       	ldi	r30, 0x36	; 54
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	88 70       	andi	r24, 0x08	; 8
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	09 f0       	breq	.+2      	; 0x211a <time_setting+0x64c>
    2118:	5f c0       	rjmp	.+190    	; 0x21d8 <time_setting+0x70a>
		{
			if((minutes1==0)&(minutes2==0)) // Handle decrementing minutes
    211a:	80 91 6a 00 	lds	r24, 0x006A
    211e:	6f 96       	adiw	r28, 0x1f	; 31
    2120:	1f ae       	std	Y+63, r1	; 0x3f
    2122:	6f 97       	sbiw	r28, 0x1f	; 31
    2124:	88 23       	and	r24, r24
    2126:	21 f4       	brne	.+8      	; 0x2130 <time_setting+0x662>
    2128:	f1 e0       	ldi	r31, 0x01	; 1
    212a:	6f 96       	adiw	r28, 0x1f	; 31
    212c:	ff af       	std	Y+63, r31	; 0x3f
    212e:	6f 97       	sbiw	r28, 0x1f	; 31
    2130:	80 91 6b 00 	lds	r24, 0x006B
    2134:	6e 96       	adiw	r28, 0x1e	; 30
    2136:	1f ae       	std	Y+63, r1	; 0x3f
    2138:	6e 97       	sbiw	r28, 0x1e	; 30
    213a:	88 23       	and	r24, r24
    213c:	21 f4       	brne	.+8      	; 0x2146 <time_setting+0x678>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	6e 96       	adiw	r28, 0x1e	; 30
    2142:	8f af       	std	Y+63, r24	; 0x3f
    2144:	6e 97       	sbiw	r28, 0x1e	; 30
    2146:	6f 96       	adiw	r28, 0x1f	; 31
    2148:	8f ad       	ldd	r24, Y+63	; 0x3f
    214a:	6f 97       	sbiw	r28, 0x1f	; 31
    214c:	6e 96       	adiw	r28, 0x1e	; 30
    214e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2150:	6e 97       	sbiw	r28, 0x1e	; 30
    2152:	89 23       	and	r24, r25
    2154:	88 23       	and	r24, r24
    2156:	39 f0       	breq	.+14     	; 0x2166 <time_setting+0x698>
			{
				minutes1=9;
    2158:	89 e0       	ldi	r24, 0x09	; 9
    215a:	80 93 6a 00 	sts	0x006A, r24
				minutes2=5;
    215e:	85 e0       	ldi	r24, 0x05	; 5
    2160:	80 93 6b 00 	sts	0x006B, r24
    2164:	39 c0       	rjmp	.+114    	; 0x21d8 <time_setting+0x70a>
			}
			else if((minutes2>0)&(minutes1==0))
    2166:	80 91 6b 00 	lds	r24, 0x006B
    216a:	a5 96       	adiw	r28, 0x25	; 37
    216c:	8f af       	std	Y+63, r24	; 0x3f
    216e:	a5 97       	sbiw	r28, 0x25	; 37
    2170:	a5 96       	adiw	r28, 0x25	; 37
    2172:	ef ad       	ldd	r30, Y+63	; 0x3f
    2174:	a5 97       	sbiw	r28, 0x25	; 37
    2176:	ee 23       	and	r30, r30
    2178:	21 f0       	breq	.+8      	; 0x2182 <time_setting+0x6b4>
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	a5 96       	adiw	r28, 0x25	; 37
    217e:	ff af       	std	Y+63, r31	; 0x3f
    2180:	a5 97       	sbiw	r28, 0x25	; 37
    2182:	a5 96       	adiw	r28, 0x25	; 37
    2184:	8f ad       	ldd	r24, Y+63	; 0x3f
    2186:	a5 97       	sbiw	r28, 0x25	; 37
    2188:	6d 96       	adiw	r28, 0x1d	; 29
    218a:	8f af       	std	Y+63, r24	; 0x3f
    218c:	6d 97       	sbiw	r28, 0x1d	; 29
    218e:	80 91 6a 00 	lds	r24, 0x006A
    2192:	6c 96       	adiw	r28, 0x1c	; 28
    2194:	1f ae       	std	Y+63, r1	; 0x3f
    2196:	6c 97       	sbiw	r28, 0x1c	; 28
    2198:	88 23       	and	r24, r24
    219a:	21 f4       	brne	.+8      	; 0x21a4 <time_setting+0x6d6>
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	6c 96       	adiw	r28, 0x1c	; 28
    21a0:	9f af       	std	Y+63, r25	; 0x3f
    21a2:	6c 97       	sbiw	r28, 0x1c	; 28
    21a4:	6d 96       	adiw	r28, 0x1d	; 29
    21a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    21a8:	6d 97       	sbiw	r28, 0x1d	; 29
    21aa:	6c 96       	adiw	r28, 0x1c	; 28
    21ac:	ef ad       	ldd	r30, Y+63	; 0x3f
    21ae:	6c 97       	sbiw	r28, 0x1c	; 28
    21b0:	8e 23       	and	r24, r30
    21b2:	88 23       	and	r24, r24
    21b4:	49 f0       	breq	.+18     	; 0x21c8 <time_setting+0x6fa>
			{
				minutes2--;
    21b6:	80 91 6b 00 	lds	r24, 0x006B
    21ba:	81 50       	subi	r24, 0x01	; 1
    21bc:	80 93 6b 00 	sts	0x006B, r24
				minutes1=9;
    21c0:	89 e0       	ldi	r24, 0x09	; 9
    21c2:	80 93 6a 00 	sts	0x006A, r24
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <time_setting+0x70a>
			}
			else{
				minutes1--;
    21c8:	80 91 6a 00 	lds	r24, 0x006A
    21cc:	81 50       	subi	r24, 0x01	; 1
    21ce:	80 93 6a 00 	sts	0x006A, r24
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <time_setting+0x70a>
			}
		}
		while(!(PINB&(1<<PB3)))   // Display the time while button is pressed
		{
			display();
    21d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			}
			else{
				minutes1--;
			}
		}
		while(!(PINB&(1<<PB3)))   // Display the time while button is pressed
    21d8:	e6 e3       	ldi	r30, 0x36	; 54
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 70       	andi	r24, 0x08	; 8
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	a9 f3       	breq	.-22     	; 0x21d4 <time_setting+0x706>
		{
			display();
		}
	}
	if(!(PINB&(1<<PB1)))          // If hours increment button (PB1) is pressed
    21ea:	e6 e3       	ldi	r30, 0x36	; 54
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	82 70       	andi	r24, 0x02	; 2
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	09 f0       	breq	.+2      	; 0x21fe <time_setting+0x730>
    21fc:	bd c0       	rjmp	.+378    	; 0x2378 <time_setting+0x8aa>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 ef       	ldi	r26, 0xF0	; 240
    2204:	b1 e4       	ldi	r27, 0x41	; 65
    2206:	89 8f       	std	Y+25, r24	; 0x19
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	ab 8f       	std	Y+27, r26	; 0x1b
    220c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	55 e4       	ldi	r21, 0x45	; 69
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8d 8b       	std	Y+21, r24	; 0x15
    2228:	9e 8b       	std	Y+22, r25	; 0x16
    222a:	af 8b       	std	Y+23, r26	; 0x17
    222c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <time_setting+0x782>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <time_setting+0x800>
	else if (__tmp > 65535)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <time_setting+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <time_setting+0x7e2>
    2292:	80 e9       	ldi	r24, 0x90	; 144
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	9a 8b       	std	Y+18, r25	; 0x12
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	89 89       	ldd	r24, Y+17	; 0x11
    229c:	9a 89       	ldd	r25, Y+18	; 0x12
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <time_setting+0x7d0>
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8b 89       	ldd	r24, Y+19	; 0x13
    22a8:	9c 89       	ldd	r25, Y+20	; 0x14
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <time_setting+0x7c4>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <time_setting+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	98 8b       	std	Y+16, r25	; 0x10
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <time_setting+0x80c>
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB1)))      // Check if the button is still pressed
    22e2:	e6 e3       	ldi	r30, 0x36	; 54
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	82 70       	andi	r24, 0x02	; 2
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	c1 f5       	brne	.+112    	; 0x2364 <time_setting+0x896>
		{
			hours1++;             // Increment hours1
    22f4:	80 91 6c 00 	lds	r24, 0x006C
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	80 93 6c 00 	sts	0x006C, r24
			if(hours1==10)        // Reset hours1 and increment hours2 if necessary
    22fe:	80 91 6c 00 	lds	r24, 0x006C
    2302:	8a 30       	cpi	r24, 0x0A	; 10
    2304:	39 f4       	brne	.+14     	; 0x2314 <time_setting+0x846>
			{
				hours1=0;
    2306:	10 92 6c 00 	sts	0x006C, r1
				hours2++;
    230a:	80 91 6d 00 	lds	r24, 0x006D
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	80 93 6d 00 	sts	0x006D, r24
			}
			if((hours2==2)&(hours1==4)) // Reset hours to 00 after 23
    2314:	80 91 6d 00 	lds	r24, 0x006D
    2318:	6b 96       	adiw	r28, 0x1b	; 27
    231a:	1f ae       	std	Y+63, r1	; 0x3f
    231c:	6b 97       	sbiw	r28, 0x1b	; 27
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	21 f4       	brne	.+8      	; 0x232a <time_setting+0x85c>
    2322:	f1 e0       	ldi	r31, 0x01	; 1
    2324:	6b 96       	adiw	r28, 0x1b	; 27
    2326:	ff af       	std	Y+63, r31	; 0x3f
    2328:	6b 97       	sbiw	r28, 0x1b	; 27
    232a:	80 91 6c 00 	lds	r24, 0x006C
    232e:	6a 96       	adiw	r28, 0x1a	; 26
    2330:	1f ae       	std	Y+63, r1	; 0x3f
    2332:	6a 97       	sbiw	r28, 0x1a	; 26
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	21 f4       	brne	.+8      	; 0x2340 <time_setting+0x872>
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	6a 96       	adiw	r28, 0x1a	; 26
    233c:	8f af       	std	Y+63, r24	; 0x3f
    233e:	6a 97       	sbiw	r28, 0x1a	; 26
    2340:	6b 96       	adiw	r28, 0x1b	; 27
    2342:	8f ad       	ldd	r24, Y+63	; 0x3f
    2344:	6b 97       	sbiw	r28, 0x1b	; 27
    2346:	6a 96       	adiw	r28, 0x1a	; 26
    2348:	9f ad       	ldd	r25, Y+63	; 0x3f
    234a:	6a 97       	sbiw	r28, 0x1a	; 26
    234c:	89 23       	and	r24, r25
    234e:	88 23       	and	r24, r24
    2350:	49 f0       	breq	.+18     	; 0x2364 <time_setting+0x896>
			{
				hours2=hours1=0;
    2352:	10 92 6c 00 	sts	0x006C, r1
    2356:	80 91 6c 00 	lds	r24, 0x006C
    235a:	80 93 6d 00 	sts	0x006D, r24
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <time_setting+0x896>
			}
		}
		while(!(PINB&(1<<PB1)))   // Display the time while button is pressed
		{
			display();
    2360:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			if((hours2==2)&(hours1==4)) // Reset hours to 00 after 23
			{
				hours2=hours1=0;
			}
		}
		while(!(PINB&(1<<PB1)))   // Display the time while button is pressed
    2364:	e6 e3       	ldi	r30, 0x36	; 54
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	82 70       	andi	r24, 0x02	; 2
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	a9 f3       	breq	.-22     	; 0x2360 <time_setting+0x892>
    2376:	ee c0       	rjmp	.+476    	; 0x2554 <time_setting+0xa86>
		{
			display();
		}
	}
	else if(!(PINB&(1<<PB0)))     // If hours decrement button (PB0) is pressed
    2378:	e6 e3       	ldi	r30, 0x36	; 54
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	81 70       	andi	r24, 0x01	; 1
    2384:	90 70       	andi	r25, 0x00	; 0
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	09 f0       	breq	.+2      	; 0x238c <time_setting+0x8be>
    238a:	e4 c0       	rjmp	.+456    	; 0x2554 <time_setting+0xa86>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 ef       	ldi	r26, 0xF0	; 240
    2392:	b1 e4       	ldi	r27, 0x41	; 65
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	ad 87       	std	Y+13, r26	; 0x0d
    239a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a e7       	ldi	r20, 0x7A	; 122
    23aa:	55 e4       	ldi	r21, 0x45	; 69
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8f 83       	std	Y+7, r24	; 0x07
    23b6:	98 87       	std	Y+8, r25	; 0x08
    23b8:	a9 87       	std	Y+9, r26	; 0x09
    23ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <time_setting+0x910>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <time_setting+0x98e>
	else if (__tmp > 65535)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <time_setting+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	0f c0       	rjmp	.+30     	; 0x243e <time_setting+0x970>
    2420:	80 e9       	ldi	r24, 0x90	; 144
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	8b 83       	std	Y+3, r24	; 0x03
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <time_setting+0x95e>
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <time_setting+0x952>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <time_setting+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <time_setting+0x99a>
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(30);            // Debounce the button press
		if(!(PINB&(1<<PB0)))      // Check if the button is still pressed
    2470:	e6 e3       	ldi	r30, 0x36	; 54
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	81 70       	andi	r24, 0x01	; 1
    247c:	90 70       	andi	r25, 0x00	; 0
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	09 f0       	breq	.+2      	; 0x2484 <time_setting+0x9b6>
    2482:	5f c0       	rjmp	.+190    	; 0x2542 <time_setting+0xa74>
		{
			if((hours1==0)&(hours2==0)) // Handle decrementing hours
    2484:	80 91 6c 00 	lds	r24, 0x006C
    2488:	69 96       	adiw	r28, 0x19	; 25
    248a:	1f ae       	std	Y+63, r1	; 0x3f
    248c:	69 97       	sbiw	r28, 0x19	; 25
    248e:	88 23       	and	r24, r24
    2490:	21 f4       	brne	.+8      	; 0x249a <time_setting+0x9cc>
    2492:	e1 e0       	ldi	r30, 0x01	; 1
    2494:	69 96       	adiw	r28, 0x19	; 25
    2496:	ef af       	std	Y+63, r30	; 0x3f
    2498:	69 97       	sbiw	r28, 0x19	; 25
    249a:	80 91 6d 00 	lds	r24, 0x006D
    249e:	68 96       	adiw	r28, 0x18	; 24
    24a0:	1f ae       	std	Y+63, r1	; 0x3f
    24a2:	68 97       	sbiw	r28, 0x18	; 24
    24a4:	88 23       	and	r24, r24
    24a6:	21 f4       	brne	.+8      	; 0x24b0 <time_setting+0x9e2>
    24a8:	f1 e0       	ldi	r31, 0x01	; 1
    24aa:	68 96       	adiw	r28, 0x18	; 24
    24ac:	ff af       	std	Y+63, r31	; 0x3f
    24ae:	68 97       	sbiw	r28, 0x18	; 24
    24b0:	69 96       	adiw	r28, 0x19	; 25
    24b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    24b4:	69 97       	sbiw	r28, 0x19	; 25
    24b6:	68 96       	adiw	r28, 0x18	; 24
    24b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    24ba:	68 97       	sbiw	r28, 0x18	; 24
    24bc:	89 23       	and	r24, r25
    24be:	88 23       	and	r24, r24
    24c0:	39 f0       	breq	.+14     	; 0x24d0 <time_setting+0xa02>
			{
				hours1=3;
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	80 93 6c 00 	sts	0x006C, r24
				hours2=2;
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	80 93 6d 00 	sts	0x006D, r24
    24ce:	39 c0       	rjmp	.+114    	; 0x2542 <time_setting+0xa74>
			}
			else if((hours2>0)&(hours1==0))
    24d0:	80 91 6d 00 	lds	r24, 0x006D
    24d4:	a6 96       	adiw	r28, 0x26	; 38
    24d6:	8f af       	std	Y+63, r24	; 0x3f
    24d8:	a6 97       	sbiw	r28, 0x26	; 38
    24da:	a6 96       	adiw	r28, 0x26	; 38
    24dc:	ef ad       	ldd	r30, Y+63	; 0x3f
    24de:	a6 97       	sbiw	r28, 0x26	; 38
    24e0:	ee 23       	and	r30, r30
    24e2:	21 f0       	breq	.+8      	; 0x24ec <time_setting+0xa1e>
    24e4:	f1 e0       	ldi	r31, 0x01	; 1
    24e6:	a6 96       	adiw	r28, 0x26	; 38
    24e8:	ff af       	std	Y+63, r31	; 0x3f
    24ea:	a6 97       	sbiw	r28, 0x26	; 38
    24ec:	a6 96       	adiw	r28, 0x26	; 38
    24ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    24f0:	a6 97       	sbiw	r28, 0x26	; 38
    24f2:	67 96       	adiw	r28, 0x17	; 23
    24f4:	8f af       	std	Y+63, r24	; 0x3f
    24f6:	67 97       	sbiw	r28, 0x17	; 23
    24f8:	80 91 6c 00 	lds	r24, 0x006C
    24fc:	66 96       	adiw	r28, 0x16	; 22
    24fe:	1f ae       	std	Y+63, r1	; 0x3f
    2500:	66 97       	sbiw	r28, 0x16	; 22
    2502:	88 23       	and	r24, r24
    2504:	21 f4       	brne	.+8      	; 0x250e <time_setting+0xa40>
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	66 96       	adiw	r28, 0x16	; 22
    250a:	9f af       	std	Y+63, r25	; 0x3f
    250c:	66 97       	sbiw	r28, 0x16	; 22
    250e:	67 96       	adiw	r28, 0x17	; 23
    2510:	8f ad       	ldd	r24, Y+63	; 0x3f
    2512:	67 97       	sbiw	r28, 0x17	; 23
    2514:	66 96       	adiw	r28, 0x16	; 22
    2516:	ef ad       	ldd	r30, Y+63	; 0x3f
    2518:	66 97       	sbiw	r28, 0x16	; 22
    251a:	8e 23       	and	r24, r30
    251c:	88 23       	and	r24, r24
    251e:	49 f0       	breq	.+18     	; 0x2532 <time_setting+0xa64>
			{
				hours2--;
    2520:	80 91 6d 00 	lds	r24, 0x006D
    2524:	81 50       	subi	r24, 0x01	; 1
    2526:	80 93 6d 00 	sts	0x006D, r24
				hours1=9;
    252a:	89 e0       	ldi	r24, 0x09	; 9
    252c:	80 93 6c 00 	sts	0x006C, r24
    2530:	08 c0       	rjmp	.+16     	; 0x2542 <time_setting+0xa74>
			}
			else{
				hours1--;
    2532:	80 91 6c 00 	lds	r24, 0x006C
    2536:	81 50       	subi	r24, 0x01	; 1
    2538:	80 93 6c 00 	sts	0x006C, r24
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <time_setting+0xa74>
			}
		}
		while(!(PINB&(1<<PB0)))   // Display the time while button is pressed
		{
			display();
    253e:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
			}
			else{
				hours1--;
			}
		}
		while(!(PINB&(1<<PB0)))   // Display the time while button is pressed
    2542:	e6 e3       	ldi	r30, 0x36	; 54
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	81 70       	andi	r24, 0x01	; 1
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	a9 f3       	breq	.-22     	; 0x253e <time_setting+0xa70>
		{
			display();
		}
	}
}
    2554:	cb 59       	subi	r28, 0x9B	; 155
    2556:	df 4f       	sbci	r29, 0xFF	; 255
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	08 95       	ret

0000256c <main>:

int main (void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	2e 97       	sbiw	r28, 0x0e	; 14
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
	DDRA = (1<<PA0) | (1<<PA1) | (1<<PA2) | (1<<PA3) | (1<<PA4); // Set specific pins of PORTA as output
    2580:	ea e3       	ldi	r30, 0x3A	; 58
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	8f e1       	ldi	r24, 0x1F	; 31
    2586:	80 83       	st	Z, r24
	PORTA = 0b00111111;       // Initialize PORTA with this binary value
    2588:	eb e3       	ldi	r30, 0x3B	; 59
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	8f e3       	ldi	r24, 0x3F	; 63
    258e:	80 83       	st	Z, r24
	DDRC = DDRC | (0x0f);     // Set the lower 4 bits of PORTC as output
    2590:	a4 e3       	ldi	r26, 0x34	; 52
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e4 e3       	ldi	r30, 0x34	; 52
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	8f 60       	ori	r24, 0x0F	; 15
    259c:	8c 93       	st	X, r24
	PORTC = 0;                // Initialize PORTC to zero
    259e:	e5 e3       	ldi	r30, 0x35	; 53
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	10 82       	st	Z, r1
	/* Alarm Setting */
	{
		DDRD |= (1<<PD0);     // Set PD0 as output for alarm
    25a4:	a1 e3       	ldi	r26, 0x31	; 49
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e1 e3       	ldi	r30, 0x31	; 49
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	81 60       	ori	r24, 0x01	; 1
    25b0:	8c 93       	st	X, r24
		PORTD &= ~(1<<PD0);   // Clear PD0 (turn off alarm)
    25b2:	a2 e3       	ldi	r26, 0x32	; 50
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e2 e3       	ldi	r30, 0x32	; 50
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	8c 93       	st	X, r24
	}
	Timer1_set();             // Set up Timer1 with compare mode B
    25c0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Timer1_set>
	External_Interrupt_INT0(); // Initialize external interrupt for the reset button
    25c4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <External_Interrupt_INT0>
	External_Interrupt_INT1(); // Initialize external interrupt for the pause button
    25c8:	0e 94 94 0c 	call	0x1928	; 0x1928 <External_Interrupt_INT1>
	External_Interrupt_INT2(); // Initialize external interrupt for the resume button
    25cc:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <External_Interrupt_INT2>
	Toggle_button();           // Initialize the toggle button (PB7)
    25d0:	0e 94 bd 0a 	call	0x157a	; 0x157a <Toggle_button>
	sec_buttons();             // Initialize the second adjustment buttons
    25d4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <sec_buttons>
	minute_buttons();          // Initialize the minute adjustment buttons
    25d8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <minute_buttons>
	hour_buttons();            // Initialize the hour adjustment buttons
    25dc:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <hour_buttons>
	for(;;)                    // Infinite loop
	{
		display();             // Continuously update the display
    25e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
		time_setting();        // Handle time setting based on button presses
    25e4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <time_setting>
		if(!(PINB & (1<<PB7))) // Check if the toggle button (PB7) is pressed
    25e8:	e6 e3       	ldi	r30, 0x36	; 54
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	88 23       	and	r24, r24
    25f0:	bc f3       	brlt	.-18     	; 0x25e0 <main+0x74>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 ef       	ldi	r26, 0xF0	; 240
    25f8:	b1 e4       	ldi	r27, 0x41	; 65
    25fa:	8b 87       	std	Y+11, r24	; 0x0b
    25fc:	9c 87       	std	Y+12, r25	; 0x0c
    25fe:	ad 87       	std	Y+13, r26	; 0x0d
    2600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a e7       	ldi	r20, 0x7A	; 122
    2610:	55 e4       	ldi	r21, 0x45	; 69
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8f 83       	std	Y+7, r24	; 0x07
    261c:	98 87       	std	Y+8, r25	; 0x08
    261e:	a9 87       	std	Y+9, r26	; 0x09
    2620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <main+0xd8>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <main+0x156>
	else if (__tmp > 65535)
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <main+0x138>
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <main+0x126>
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <main+0x11a>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <main+0x162>
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(30);     // Debounce the button
			if(!(PINB & (1<<PB7))) // If button is still pressed
    26d6:	e6 e3       	ldi	r30, 0x36	; 54
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 23       	and	r24, r24
    26de:	4c f1       	brlt	.+82     	; 0x2732 <main+0x1c6>
			{
				flag_toggle = flag_toggle ^ 1; // Toggle between increment and decrement modes
    26e0:	90 91 6e 00 	lds	r25, 0x006E
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	89 27       	eor	r24, r25
    26e8:	80 93 6e 00 	sts	0x006E, r24
				if(flag_toggle == 0)           // If in increment mode
    26ec:	80 91 6e 00 	lds	r24, 0x006E
    26f0:	88 23       	and	r24, r24
    26f2:	81 f4       	brne	.+32     	; 0x2714 <main+0x1a8>
				{
					TCCR1A = (1<<COM1B0) | (1<<COM1B1) | (1<<FOC1B); // Set timer compare mode
    26f4:	ef e4       	ldi	r30, 0x4F	; 79
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	84 e3       	ldi	r24, 0x34	; 52
    26fa:	80 83       	st	Z, r24
					TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);     // Configure timer
    26fc:	ee e4       	ldi	r30, 0x4E	; 78
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	8d e0       	ldi	r24, 0x0D	; 13
    2702:	80 83       	st	Z, r24
					PORTD &= ~(1<<PD0); // Turn off alarm
    2704:	a2 e3       	ldi	r26, 0x32	; 50
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e2 e3       	ldi	r30, 0x32	; 50
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	8e 7f       	andi	r24, 0xFE	; 254
    2710:	8c 93       	st	X, r24
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <main+0x1c6>
				}
				else if(flag_toggle == 1)       // If in decrement mode
    2714:	80 91 6e 00 	lds	r24, 0x006E
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	59 f4       	brne	.+22     	; 0x2732 <main+0x1c6>
				{
					TCCR1A = (1<<COM1A0) | (1<<COM1A1) | (1<<FOC1B); // Set different timer mode
    271c:	ef e4       	ldi	r30, 0x4F	; 79
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	84 ec       	ldi	r24, 0xC4	; 196
    2722:	80 83       	st	Z, r24
					TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);     // Configure timer
    2724:	ee e4       	ldi	r30, 0x4E	; 78
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	8d e0       	ldi	r24, 0x0D	; 13
    272a:	80 83       	st	Z, r24
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <main+0x1c6>
				}
			}
			while(!(PINB & (1<<PB7))) // Wait until the button is released
			{
				display();             // Keep updating the display
    272e:	0e 94 a3 05 	call	0xb46	; 0xb46 <display>
				{
					TCCR1A = (1<<COM1A0) | (1<<COM1A1) | (1<<FOC1B); // Set different timer mode
					TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);     // Configure timer
				}
			}
			while(!(PINB & (1<<PB7))) // Wait until the button is released
    2732:	e6 e3       	ldi	r30, 0x36	; 54
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 23       	and	r24, r24
    273a:	cc f7       	brge	.-14     	; 0x272e <main+0x1c2>
    273c:	51 cf       	rjmp	.-350    	; 0x25e0 <main+0x74>

0000273e <__prologue_saves__>:
    273e:	2f 92       	push	r2
    2740:	3f 92       	push	r3
    2742:	4f 92       	push	r4
    2744:	5f 92       	push	r5
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	ca 1b       	sub	r28, r26
    2768:	db 0b       	sbc	r29, r27
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	09 94       	ijmp

00002776 <__epilogue_restores__>:
    2776:	2a 88       	ldd	r2, Y+18	; 0x12
    2778:	39 88       	ldd	r3, Y+17	; 0x11
    277a:	48 88       	ldd	r4, Y+16	; 0x10
    277c:	5f 84       	ldd	r5, Y+15	; 0x0f
    277e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2780:	7d 84       	ldd	r7, Y+13	; 0x0d
    2782:	8c 84       	ldd	r8, Y+12	; 0x0c
    2784:	9b 84       	ldd	r9, Y+11	; 0x0b
    2786:	aa 84       	ldd	r10, Y+10	; 0x0a
    2788:	b9 84       	ldd	r11, Y+9	; 0x09
    278a:	c8 84       	ldd	r12, Y+8	; 0x08
    278c:	df 80       	ldd	r13, Y+7	; 0x07
    278e:	ee 80       	ldd	r14, Y+6	; 0x06
    2790:	fd 80       	ldd	r15, Y+5	; 0x05
    2792:	0c 81       	ldd	r16, Y+4	; 0x04
    2794:	1b 81       	ldd	r17, Y+3	; 0x03
    2796:	aa 81       	ldd	r26, Y+2	; 0x02
    2798:	b9 81       	ldd	r27, Y+1	; 0x01
    279a:	ce 0f       	add	r28, r30
    279c:	d1 1d       	adc	r29, r1
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	ed 01       	movw	r28, r26
    27aa:	08 95       	ret

000027ac <_exit>:
    27ac:	f8 94       	cli

000027ae <__stop_program>:
    27ae:	ff cf       	rjmp	.-2      	; 0x27ae <__stop_program>
